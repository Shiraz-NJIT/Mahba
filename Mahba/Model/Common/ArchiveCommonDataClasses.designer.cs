#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NjitSoftware.Model.Common
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Njit")]
	public partial class ArchiveCommonDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessPermissionTree(AccessPermissionTree instance);
    partial void UpdateAccessPermissionTree(AccessPermissionTree instance);
    partial void DeleteAccessPermissionTree(AccessPermissionTree instance);
    partial void InsertArchive(Archive instance);
    partial void UpdateArchive(Archive instance);
    partial void DeleteArchive(Archive instance);
    partial void InsertArchiveGroup(ArchiveGroup instance);
    partial void UpdateArchiveGroup(ArchiveGroup instance);
    partial void DeleteArchiveGroup(ArchiveGroup instance);
    partial void InsertArchiveGroupField(ArchiveGroupField instance);
    partial void UpdateArchiveGroupField(ArchiveGroupField instance);
    partial void DeleteArchiveGroupField(ArchiveGroupField instance);
    partial void InsertArchiveGroupSubGroupField(ArchiveGroupSubGroupField instance);
    partial void UpdateArchiveGroupSubGroupField(ArchiveGroupSubGroupField instance);
    partial void DeleteArchiveGroupSubGroupField(ArchiveGroupSubGroupField instance);
    partial void InsertArchiveGroupTab(ArchiveGroupTab instance);
    partial void UpdateArchiveGroupTab(ArchiveGroupTab instance);
    partial void DeleteArchiveGroupTab(ArchiveGroupTab instance);
    partial void InsertArchiveGroupTabType(ArchiveGroupTabType instance);
    partial void UpdateArchiveGroupTabType(ArchiveGroupTabType instance);
    partial void DeleteArchiveGroupTabType(ArchiveGroupTabType instance);
    partial void InsertArchiveTree(ArchiveTree instance);
    partial void UpdateArchiveTree(ArchiveTree instance);
    partial void DeleteArchiveTree(ArchiveTree instance);
    partial void InsertBoxOfFieldType(BoxOfFieldType instance);
    partial void UpdateBoxOfFieldType(BoxOfFieldType instance);
    partial void DeleteBoxOfFieldType(BoxOfFieldType instance);
    partial void InsertBoxType(BoxType instance);
    partial void UpdateBoxType(BoxType instance);
    partial void DeleteBoxType(BoxType instance);
    partial void InsertCounterFieldSetting(CounterFieldSetting instance);
    partial void UpdateCounterFieldSetting(CounterFieldSetting instance);
    partial void DeleteCounterFieldSetting(CounterFieldSetting instance);
    partial void InsertDatabaseVersion(DatabaseVersion instance);
    partial void UpdateDatabaseVersion(DatabaseVersion instance);
    partial void DeleteDatabaseVersion(DatabaseVersion instance);
    partial void InsertFieldStatus(FieldStatus instance);
    partial void UpdateFieldStatus(FieldStatus instance);
    partial void DeleteFieldStatus(FieldStatus instance);
    partial void InsertFieldType(FieldType instance);
    partial void UpdateFieldType(FieldType instance);
    partial void DeleteFieldType(FieldType instance);
    partial void InsertFormState(FormState instance);
    partial void UpdateFormState(FormState instance);
    partial void DeleteFormState(FormState instance);
    partial void InsertProgramSetting(ProgramSetting instance);
    partial void UpdateProgramSetting(ProgramSetting instance);
    partial void DeleteProgramSetting(ProgramSetting instance);
    partial void InsertStatusOfFieldType(StatusOfFieldType instance);
    partial void UpdateStatusOfFieldType(StatusOfFieldType instance);
    partial void DeleteStatusOfFieldType(StatusOfFieldType instance);
    partial void InsertTaskSchedule(TaskSchedule instance);
    partial void UpdateTaskSchedule(TaskSchedule instance);
    partial void DeleteTaskSchedule(TaskSchedule instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserAccessPermission(UserAccessPermission instance);
    partial void UpdateUserAccessPermission(UserAccessPermission instance);
    partial void DeleteUserAccessPermission(UserAccessPermission instance);
    partial void InsertUserLog(UserLog instance);
    partial void UpdateUserLog(UserLog instance);
    partial void DeleteUserLog(UserLog instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertUserRoleAccessPermission(UserRoleAccessPermission instance);
    partial void UpdateUserRoleAccessPermission(UserRoleAccessPermission instance);
    partial void DeleteUserRoleAccessPermission(UserRoleAccessPermission instance);
    partial void InsertUserSetting(UserSetting instance);
    partial void UpdateUserSetting(UserSetting instance);
    partial void DeleteUserSetting(UserSetting instance);
    partial void InsertDocumentsFailure(DocumentsFailure instance);
    partial void UpdateDocumentsFailure(DocumentsFailure instance);
    partial void DeleteDocumentsFailure(DocumentsFailure instance);
    partial void InsertPermissionSecurity(PermissionSecurity instance);
    partial void UpdatePermissionSecurity(PermissionSecurity instance);
    partial void DeletePermissionSecurity(PermissionSecurity instance);
    partial void InsertPermissionTitle(PermissionTitle instance);
    partial void UpdatePermissionTitle(PermissionTitle instance);
    partial void DeletePermissionTitle(PermissionTitle instance);
    partial void InsertPermissionDossier(PermissionDossier instance);
    partial void UpdatePermissionDossier(PermissionDossier instance);
    partial void DeletePermissionDossier(PermissionDossier instance);
    #endregion
		
		public ArchiveCommonDataClassesDataContext() : 
				base(global::NjitSoftware.Properties.Settings.Default.ArchiveCommonConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ArchiveCommonDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArchiveCommonDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArchiveCommonDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArchiveCommonDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessPermissionTree> AccessPermissionTrees
		{
			get
			{
				return this.GetTable<AccessPermissionTree>();
			}
		}
		
		public System.Data.Linq.Table<UserRoleReport> UserRoleReports
		{
			get
			{
				return this.GetTable<UserRoleReport>();
			}
		}
		
		public System.Data.Linq.Table<Archive> Archives
		{
			get
			{
				return this.GetTable<Archive>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveGroup> ArchiveGroups
		{
			get
			{
				return this.GetTable<ArchiveGroup>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveGroupField> ArchiveGroupFields
		{
			get
			{
				return this.GetTable<ArchiveGroupField>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveGroupSubGroupField> ArchiveGroupSubGroupFields
		{
			get
			{
				return this.GetTable<ArchiveGroupSubGroupField>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveGroupTab> ArchiveGroupTabs
		{
			get
			{
				return this.GetTable<ArchiveGroupTab>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveGroupTabType> ArchiveGroupTabTypes
		{
			get
			{
				return this.GetTable<ArchiveGroupTabType>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveTree> ArchiveTrees
		{
			get
			{
				return this.GetTable<ArchiveTree>();
			}
		}
		
		public System.Data.Linq.Table<BoxOfFieldType> BoxOfFieldTypes
		{
			get
			{
				return this.GetTable<BoxOfFieldType>();
			}
		}
		
		public System.Data.Linq.Table<BoxType> BoxTypes
		{
			get
			{
				return this.GetTable<BoxType>();
			}
		}
		
		public System.Data.Linq.Table<CounterFieldSetting> CounterFieldSettings
		{
			get
			{
				return this.GetTable<CounterFieldSetting>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseVersion> DatabaseVersions
		{
			get
			{
				return this.GetTable<DatabaseVersion>();
			}
		}
		
		public System.Data.Linq.Table<FieldStatus> FieldStatus
		{
			get
			{
				return this.GetTable<FieldStatus>();
			}
		}
		
		public System.Data.Linq.Table<FieldType> FieldTypes
		{
			get
			{
				return this.GetTable<FieldType>();
			}
		}
		
		public System.Data.Linq.Table<FormState> FormStates
		{
			get
			{
				return this.GetTable<FormState>();
			}
		}
		
		public System.Data.Linq.Table<ProgramSetting> ProgramSettings
		{
			get
			{
				return this.GetTable<ProgramSetting>();
			}
		}
		
		public System.Data.Linq.Table<StatusOfFieldType> StatusOfFieldTypes
		{
			get
			{
				return this.GetTable<StatusOfFieldType>();
			}
		}
		
		public System.Data.Linq.Table<TaskSchedule> TaskSchedules
		{
			get
			{
				return this.GetTable<TaskSchedule>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserAccessPermission> UserAccessPermissions
		{
			get
			{
				return this.GetTable<UserAccessPermission>();
			}
		}
		
		public System.Data.Linq.Table<UserLog> UserLogs
		{
			get
			{
				return this.GetTable<UserLog>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<UserRoleAccessPermission> UserRoleAccessPermissions
		{
			get
			{
				return this.GetTable<UserRoleAccessPermission>();
			}
		}
		
		public System.Data.Linq.Table<UserSetting> UserSettings
		{
			get
			{
				return this.GetTable<UserSetting>();
			}
		}
		
		public System.Data.Linq.Table<DocumentsFailure> DocumentsFailures
		{
			get
			{
				return this.GetTable<DocumentsFailure>();
			}
		}
		
		public System.Data.Linq.Table<PermissionSecurity> PermissionSecurities
		{
			get
			{
				return this.GetTable<PermissionSecurity>();
			}
		}
		
		public System.Data.Linq.Table<PermissionTitle> PermissionTitles
		{
			get
			{
				return this.GetTable<PermissionTitle>();
			}
		}
		
		public System.Data.Linq.Table<PermissionDossier> PermissionDossiers
		{
			get
			{
				return this.GetTable<PermissionDossier>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessPermissionTree")]
	public partial class AccessPermissionTree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Item;
		
		private string _Group;
		
		private string _Title;
		
		private bool _Visible;
		
		private bool _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemChanging(string value);
    partial void OnItemChanged();
    partial void OnGroupChanging(string value);
    partial void OnGroupChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnFlagChanging(bool value);
    partial void OnFlagChanged();
    #endregion
		
		public AccessPermissionTree()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Item
		{
			get
			{
				return this._Item;
			}
			set
			{
				if ((this._Item != value))
				{
					this.OnItemChanging(value);
					this.SendPropertyChanging();
					this._Item = value;
					this.SendPropertyChanged("Item");
					this.OnItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="NVarChar(MAX)")]
		public string Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag", DbType="Bit NOT NULL")]
		public bool Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoleReport")]
	public partial class UserRoleReport
	{
		
		private int _Code;
		
		private string _Name;
		
		private bool _Locked;
		
		public UserRoleReport()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locked", DbType="Bit NOT NULL")]
		public bool Locked
		{
			get
			{
				return this._Locked;
			}
			set
			{
				if ((this._Locked != value))
				{
					this._Locked = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Archive")]
	public partial class Archive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Title;
		
		private string _DatabasePath;
		
		private bool _Active;
		
		private bool _Default;
		
		private System.Nullable<int> _ArchiveGroupID;
		
		private EntitySet<ArchiveTree> _ArchiveTrees;
		
		private EntitySet<UserLog> _UserLogs;
		
		private EntitySet<DocumentsFailure> _DocumentsFailures;
		
		private EntitySet<PermissionSecurity> _PermissionSecurities;
		
		private EntitySet<PermissionTitle> _PermissionTitles;
		
		private EntitySet<PermissionDossier> _PermissionDossiers;
		
		private EntityRef<ArchiveGroup> _ArchiveGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDatabasePathChanging(string value);
    partial void OnDatabasePathChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDefaultChanging(bool value);
    partial void OnDefaultChanged();
    partial void OnArchiveGroupIDChanging(System.Nullable<int> value);
    partial void OnArchiveGroupIDChanged();
    #endregion
		
		public Archive()
		{
			this._ArchiveTrees = new EntitySet<ArchiveTree>(new Action<ArchiveTree>(this.attach_ArchiveTrees), new Action<ArchiveTree>(this.detach_ArchiveTrees));
			this._UserLogs = new EntitySet<UserLog>(new Action<UserLog>(this.attach_UserLogs), new Action<UserLog>(this.detach_UserLogs));
			this._DocumentsFailures = new EntitySet<DocumentsFailure>(new Action<DocumentsFailure>(this.attach_DocumentsFailures), new Action<DocumentsFailure>(this.detach_DocumentsFailures));
			this._PermissionSecurities = new EntitySet<PermissionSecurity>(new Action<PermissionSecurity>(this.attach_PermissionSecurities), new Action<PermissionSecurity>(this.detach_PermissionSecurities));
			this._PermissionTitles = new EntitySet<PermissionTitle>(new Action<PermissionTitle>(this.attach_PermissionTitles), new Action<PermissionTitle>(this.detach_PermissionTitles));
			this._PermissionDossiers = new EntitySet<PermissionDossier>(new Action<PermissionDossier>(this.attach_PermissionDossiers), new Action<PermissionDossier>(this.detach_PermissionDossiers));
			this._ArchiveGroup = default(EntityRef<ArchiveGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabasePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DatabasePath
		{
			get
			{
				return this._DatabasePath;
			}
			set
			{
				if ((this._DatabasePath != value))
				{
					this.OnDatabasePathChanging(value);
					this.SendPropertyChanging();
					this._DatabasePath = value;
					this.SendPropertyChanged("DatabasePath");
					this.OnDatabasePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Default]", Storage="_Default", DbType="Bit NOT NULL")]
		public bool Default
		{
			get
			{
				return this._Default;
			}
			set
			{
				if ((this._Default != value))
				{
					this.OnDefaultChanging(value);
					this.SendPropertyChanging();
					this._Default = value;
					this.SendPropertyChanged("Default");
					this.OnDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveGroupID", DbType="Int")]
		public System.Nullable<int> ArchiveGroupID
		{
			get
			{
				return this._ArchiveGroupID;
			}
			set
			{
				if ((this._ArchiveGroupID != value))
				{
					if (this._ArchiveGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveGroupID = value;
					this.SendPropertyChanged("ArchiveGroupID");
					this.OnArchiveGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_ArchiveTree", Storage="_ArchiveTrees", ThisKey="ID", OtherKey="ArchiveID")]
		public EntitySet<ArchiveTree> ArchiveTrees
		{
			get
			{
				return this._ArchiveTrees;
			}
			set
			{
				this._ArchiveTrees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_UserLog", Storage="_UserLogs", ThisKey="ID", OtherKey="ArchiveID")]
		public EntitySet<UserLog> UserLogs
		{
			get
			{
				return this._UserLogs;
			}
			set
			{
				this._UserLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_DocumentsFailure", Storage="_DocumentsFailures", ThisKey="ID", OtherKey="ArchiveID")]
		public EntitySet<DocumentsFailure> DocumentsFailures
		{
			get
			{
				return this._DocumentsFailures;
			}
			set
			{
				this._DocumentsFailures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_PermissionSecurity", Storage="_PermissionSecurities", ThisKey="ID", OtherKey="PK_Archive")]
		public EntitySet<PermissionSecurity> PermissionSecurities
		{
			get
			{
				return this._PermissionSecurities;
			}
			set
			{
				this._PermissionSecurities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_PermissionTitle", Storage="_PermissionTitles", ThisKey="ID", OtherKey="PK_Archive")]
		public EntitySet<PermissionTitle> PermissionTitles
		{
			get
			{
				return this._PermissionTitles;
			}
			set
			{
				this._PermissionTitles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_PermissionDossier", Storage="_PermissionDossiers", ThisKey="ID", OtherKey="PK_Archive")]
		public EntitySet<PermissionDossier> PermissionDossiers
		{
			get
			{
				return this._PermissionDossiers;
			}
			set
			{
				this._PermissionDossiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroup_Archive", Storage="_ArchiveGroup", ThisKey="ArchiveGroupID", OtherKey="ID", IsForeignKey=true)]
		public ArchiveGroup ArchiveGroup
		{
			get
			{
				return this._ArchiveGroup.Entity;
			}
			set
			{
				ArchiveGroup previousValue = this._ArchiveGroup.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveGroup.Entity = null;
						previousValue.Archives.Remove(this);
					}
					this._ArchiveGroup.Entity = value;
					if ((value != null))
					{
						value.Archives.Add(this);
						this._ArchiveGroupID = value.ID;
					}
					else
					{
						this._ArchiveGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ArchiveGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveTrees(ArchiveTree entity)
		{
			this.SendPropertyChanging();
			entity.Archive = this;
		}
		
		private void detach_ArchiveTrees(ArchiveTree entity)
		{
			this.SendPropertyChanging();
			entity.Archive = null;
		}
		
		private void attach_UserLogs(UserLog entity)
		{
			this.SendPropertyChanging();
			entity.Archive = this;
		}
		
		private void detach_UserLogs(UserLog entity)
		{
			this.SendPropertyChanging();
			entity.Archive = null;
		}
		
		private void attach_DocumentsFailures(DocumentsFailure entity)
		{
			this.SendPropertyChanging();
			entity.Archive = this;
		}
		
		private void detach_DocumentsFailures(DocumentsFailure entity)
		{
			this.SendPropertyChanging();
			entity.Archive = null;
		}
		
		private void attach_PermissionSecurities(PermissionSecurity entity)
		{
			this.SendPropertyChanging();
			entity.Archive = this;
		}
		
		private void detach_PermissionSecurities(PermissionSecurity entity)
		{
			this.SendPropertyChanging();
			entity.Archive = null;
		}
		
		private void attach_PermissionTitles(PermissionTitle entity)
		{
			this.SendPropertyChanging();
			entity.Archive = this;
		}
		
		private void detach_PermissionTitles(PermissionTitle entity)
		{
			this.SendPropertyChanging();
			entity.Archive = null;
		}
		
		private void attach_PermissionDossiers(PermissionDossier entity)
		{
			this.SendPropertyChanging();
			entity.Archive = this;
		}
		
		private void detach_PermissionDossiers(PermissionDossier entity)
		{
			this.SendPropertyChanging();
			entity.Archive = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveGroup")]
	public partial class ArchiveGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private System.Nullable<int> _ParentID;
		
		private EntitySet<Archive> _Archives;
		
		private EntitySet<ArchiveGroup> _ArchiveGroups;
		
		private EntitySet<ArchiveGroupField> _ArchiveGroupFields;
		
		private EntitySet<ArchiveGroupTab> _ArchiveGroupTabs;
		
		private EntitySet<ArchiveTree> _ArchiveTrees;
		
		private EntityRef<ArchiveGroup> _ArchiveGroup1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    #endregion
		
		public ArchiveGroup()
		{
			this._Archives = new EntitySet<Archive>(new Action<Archive>(this.attach_Archives), new Action<Archive>(this.detach_Archives));
			this._ArchiveGroups = new EntitySet<ArchiveGroup>(new Action<ArchiveGroup>(this.attach_ArchiveGroups), new Action<ArchiveGroup>(this.detach_ArchiveGroups));
			this._ArchiveGroupFields = new EntitySet<ArchiveGroupField>(new Action<ArchiveGroupField>(this.attach_ArchiveGroupFields), new Action<ArchiveGroupField>(this.detach_ArchiveGroupFields));
			this._ArchiveGroupTabs = new EntitySet<ArchiveGroupTab>(new Action<ArchiveGroupTab>(this.attach_ArchiveGroupTabs), new Action<ArchiveGroupTab>(this.detach_ArchiveGroupTabs));
			this._ArchiveTrees = new EntitySet<ArchiveTree>(new Action<ArchiveTree>(this.attach_ArchiveTrees), new Action<ArchiveTree>(this.detach_ArchiveTrees));
			this._ArchiveGroup1 = default(EntityRef<ArchiveGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._ArchiveGroup1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroup_Archive", Storage="_Archives", ThisKey="ID", OtherKey="ArchiveGroupID")]
		public EntitySet<Archive> Archives
		{
			get
			{
				return this._Archives;
			}
			set
			{
				this._Archives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroup_ArchiveGroup", Storage="_ArchiveGroups", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<ArchiveGroup> ArchiveGroups
		{
			get
			{
				return this._ArchiveGroups;
			}
			set
			{
				this._ArchiveGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroup_ArchiveGroupField", Storage="_ArchiveGroupFields", ThisKey="ID", OtherKey="ArchiveGroupID")]
		public EntitySet<ArchiveGroupField> ArchiveGroupFields
		{
			get
			{
				return this._ArchiveGroupFields;
			}
			set
			{
				this._ArchiveGroupFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroup_ArchiveGroupTab", Storage="_ArchiveGroupTabs", ThisKey="ID", OtherKey="ArchiveGroupID")]
		public EntitySet<ArchiveGroupTab> ArchiveGroupTabs
		{
			get
			{
				return this._ArchiveGroupTabs;
			}
			set
			{
				this._ArchiveGroupTabs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroup_ArchiveTree", Storage="_ArchiveTrees", ThisKey="ID", OtherKey="ArchiveGroupID")]
		public EntitySet<ArchiveTree> ArchiveTrees
		{
			get
			{
				return this._ArchiveTrees;
			}
			set
			{
				this._ArchiveTrees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroup_ArchiveGroup", Storage="_ArchiveGroup1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public ArchiveGroup ArchiveGroup1
		{
			get
			{
				return this._ArchiveGroup1.Entity;
			}
			set
			{
				ArchiveGroup previousValue = this._ArchiveGroup1.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveGroup1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveGroup1.Entity = null;
						previousValue.ArchiveGroups.Remove(this);
					}
					this._ArchiveGroup1.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroups.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ArchiveGroup1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Archives(Archive entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroup = this;
		}
		
		private void detach_Archives(Archive entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroup = null;
		}
		
		private void attach_ArchiveGroups(ArchiveGroup entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroup1 = this;
		}
		
		private void detach_ArchiveGroups(ArchiveGroup entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroup1 = null;
		}
		
		private void attach_ArchiveGroupFields(ArchiveGroupField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroup = this;
		}
		
		private void detach_ArchiveGroupFields(ArchiveGroupField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroup = null;
		}
		
		private void attach_ArchiveGroupTabs(ArchiveGroupTab entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroup = this;
		}
		
		private void detach_ArchiveGroupTabs(ArchiveGroupTab entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroup = null;
		}
		
		private void attach_ArchiveTrees(ArchiveTree entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroup = this;
		}
		
		private void detach_ArchiveTrees(ArchiveTree entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveGroupField")]
	public partial class ArchiveGroupField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArchiveGroupID;
		
		private int _ArchiveGroupTabID;
		
		private string _Label;
		
		private string _FieldName;
		
		private int _FieldTypeCode;
		
		private int _StatusCode;
		
		private int _BoxTypeCode;
		
		private bool _AutoComplete;
		
		private System.Nullable<int> _MinLength;
		
		private System.Nullable<int> _MaxLength;
		
		private System.Nullable<double> _MinValue;
		
		private System.Nullable<double> _MaxValue;
		
		private string _DefaultValue;
		
		private int _Index;
		
		private EntitySet<ArchiveGroupSubGroupField> _ArchiveGroupSubGroupFields;
		
		private EntitySet<CounterFieldSetting> _CounterFieldSettings;
		
		private EntityRef<ArchiveGroup> _ArchiveGroup;
		
		private EntityRef<ArchiveGroupTab> _ArchiveGroupTab;
		
		private EntityRef<BoxType> _BoxType;
		
		private EntityRef<FieldStatus> _FieldStatus;
		
		private EntityRef<FieldType> _FieldType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArchiveGroupIDChanging(int value);
    partial void OnArchiveGroupIDChanged();
    partial void OnArchiveGroupTabIDChanging(int value);
    partial void OnArchiveGroupTabIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnFieldTypeCodeChanging(int value);
    partial void OnFieldTypeCodeChanged();
    partial void OnStatusCodeChanging(int value);
    partial void OnStatusCodeChanged();
    partial void OnBoxTypeCodeChanging(int value);
    partial void OnBoxTypeCodeChanged();
    partial void OnAutoCompleteChanging(bool value);
    partial void OnAutoCompleteChanged();
    partial void OnMinLengthChanging(System.Nullable<int> value);
    partial void OnMinLengthChanged();
    partial void OnMaxLengthChanging(System.Nullable<int> value);
    partial void OnMaxLengthChanged();
    partial void OnMinValueChanging(System.Nullable<double> value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(System.Nullable<double> value);
    partial void OnMaxValueChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    #endregion
		
		public ArchiveGroupField()
		{
			this._ArchiveGroupSubGroupFields = new EntitySet<ArchiveGroupSubGroupField>(new Action<ArchiveGroupSubGroupField>(this.attach_ArchiveGroupSubGroupFields), new Action<ArchiveGroupSubGroupField>(this.detach_ArchiveGroupSubGroupFields));
			this._CounterFieldSettings = new EntitySet<CounterFieldSetting>(new Action<CounterFieldSetting>(this.attach_CounterFieldSettings), new Action<CounterFieldSetting>(this.detach_CounterFieldSettings));
			this._ArchiveGroup = default(EntityRef<ArchiveGroup>);
			this._ArchiveGroupTab = default(EntityRef<ArchiveGroupTab>);
			this._BoxType = default(EntityRef<BoxType>);
			this._FieldStatus = default(EntityRef<FieldStatus>);
			this._FieldType = default(EntityRef<FieldType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveGroupID", DbType="Int NOT NULL")]
		public int ArchiveGroupID
		{
			get
			{
				return this._ArchiveGroupID;
			}
			set
			{
				if ((this._ArchiveGroupID != value))
				{
					if (this._ArchiveGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveGroupID = value;
					this.SendPropertyChanged("ArchiveGroupID");
					this.OnArchiveGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveGroupTabID", DbType="Int NOT NULL")]
		public int ArchiveGroupTabID
		{
			get
			{
				return this._ArchiveGroupTabID;
			}
			set
			{
				if ((this._ArchiveGroupTabID != value))
				{
					if (this._ArchiveGroupTab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveGroupTabIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveGroupTabID = value;
					this.SendPropertyChanged("ArchiveGroupTabID");
					this.OnArchiveGroupTabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(MAX)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldTypeCode", DbType="Int NOT NULL")]
		public int FieldTypeCode
		{
			get
			{
				return this._FieldTypeCode;
			}
			set
			{
				if ((this._FieldTypeCode != value))
				{
					if (this._FieldType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._FieldTypeCode = value;
					this.SendPropertyChanged("FieldTypeCode");
					this.OnFieldTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusCode", DbType="Int NOT NULL")]
		public int StatusCode
		{
			get
			{
				return this._StatusCode;
			}
			set
			{
				if ((this._StatusCode != value))
				{
					if (this._FieldStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._StatusCode = value;
					this.SendPropertyChanged("StatusCode");
					this.OnStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxTypeCode", DbType="Int NOT NULL")]
		public int BoxTypeCode
		{
			get
			{
				return this._BoxTypeCode;
			}
			set
			{
				if ((this._BoxTypeCode != value))
				{
					if (this._BoxType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoxTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._BoxTypeCode = value;
					this.SendPropertyChanged("BoxTypeCode");
					this.OnBoxTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoComplete", DbType="Bit NOT NULL")]
		public bool AutoComplete
		{
			get
			{
				return this._AutoComplete;
			}
			set
			{
				if ((this._AutoComplete != value))
				{
					this.OnAutoCompleteChanging(value);
					this.SendPropertyChanging();
					this._AutoComplete = value;
					this.SendPropertyChanged("AutoComplete");
					this.OnAutoCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinLength", DbType="Int")]
		public System.Nullable<int> MinLength
		{
			get
			{
				return this._MinLength;
			}
			set
			{
				if ((this._MinLength != value))
				{
					this.OnMinLengthChanging(value);
					this.SendPropertyChanging();
					this._MinLength = value;
					this.SendPropertyChanged("MinLength");
					this.OnMinLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxLength", DbType="Int")]
		public System.Nullable<int> MaxLength
		{
			get
			{
				return this._MaxLength;
			}
			set
			{
				if ((this._MaxLength != value))
				{
					this.OnMaxLengthChanging(value);
					this.SendPropertyChanging();
					this._MaxLength = value;
					this.SendPropertyChanged("MaxLength");
					this.OnMaxLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="Float")]
		public System.Nullable<double> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Float")]
		public System.Nullable<double> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="NVarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroupField_ArchiveGroupSubGroupField", Storage="_ArchiveGroupSubGroupFields", ThisKey="ID", OtherKey="ArchiveGroupFieldID")]
		public EntitySet<ArchiveGroupSubGroupField> ArchiveGroupSubGroupFields
		{
			get
			{
				return this._ArchiveGroupSubGroupFields;
			}
			set
			{
				this._ArchiveGroupSubGroupFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroupField_CounterFieldSetting", Storage="_CounterFieldSettings", ThisKey="ID", OtherKey="ArchiveGroupFieldID")]
		public EntitySet<CounterFieldSetting> CounterFieldSettings
		{
			get
			{
				return this._CounterFieldSettings;
			}
			set
			{
				this._CounterFieldSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroup_ArchiveGroupField", Storage="_ArchiveGroup", ThisKey="ArchiveGroupID", OtherKey="ID", IsForeignKey=true)]
		public ArchiveGroup ArchiveGroup
		{
			get
			{
				return this._ArchiveGroup.Entity;
			}
			set
			{
				ArchiveGroup previousValue = this._ArchiveGroup.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveGroup.Entity = null;
						previousValue.ArchiveGroupFields.Remove(this);
					}
					this._ArchiveGroup.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupFields.Add(this);
						this._ArchiveGroupID = value.ID;
					}
					else
					{
						this._ArchiveGroupID = default(int);
					}
					this.SendPropertyChanged("ArchiveGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroupTab_ArchiveGroupField", Storage="_ArchiveGroupTab", ThisKey="ArchiveGroupTabID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ArchiveGroupTab ArchiveGroupTab
		{
			get
			{
				return this._ArchiveGroupTab.Entity;
			}
			set
			{
				ArchiveGroupTab previousValue = this._ArchiveGroupTab.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveGroupTab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveGroupTab.Entity = null;
						previousValue.ArchiveGroupFields.Remove(this);
					}
					this._ArchiveGroupTab.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupFields.Add(this);
						this._ArchiveGroupTabID = value.ID;
					}
					else
					{
						this._ArchiveGroupTabID = default(int);
					}
					this.SendPropertyChanged("ArchiveGroupTab");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoxType_ArchiveGroupField", Storage="_BoxType", ThisKey="BoxTypeCode", OtherKey="Code", IsForeignKey=true)]
		public BoxType BoxType
		{
			get
			{
				return this._BoxType.Entity;
			}
			set
			{
				BoxType previousValue = this._BoxType.Entity;
				if (((previousValue != value) 
							|| (this._BoxType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoxType.Entity = null;
						previousValue.ArchiveGroupFields.Remove(this);
					}
					this._BoxType.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupFields.Add(this);
						this._BoxTypeCode = value.Code;
					}
					else
					{
						this._BoxTypeCode = default(int);
					}
					this.SendPropertyChanged("BoxType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldStatus_ArchiveGroupField", Storage="_FieldStatus", ThisKey="StatusCode", OtherKey="Code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FieldStatus FieldStatus
		{
			get
			{
				return this._FieldStatus.Entity;
			}
			set
			{
				FieldStatus previousValue = this._FieldStatus.Entity;
				if (((previousValue != value) 
							|| (this._FieldStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldStatus.Entity = null;
						previousValue.ArchiveGroupFields.Remove(this);
					}
					this._FieldStatus.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupFields.Add(this);
						this._StatusCode = value.Code;
					}
					else
					{
						this._StatusCode = default(int);
					}
					this.SendPropertyChanged("FieldStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_ArchiveGroupField", Storage="_FieldType", ThisKey="FieldTypeCode", OtherKey="Code", IsForeignKey=true)]
		public FieldType FieldType
		{
			get
			{
				return this._FieldType.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType.Entity;
				if (((previousValue != value) 
							|| (this._FieldType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType.Entity = null;
						previousValue.ArchiveGroupFields.Remove(this);
					}
					this._FieldType.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupFields.Add(this);
						this._FieldTypeCode = value.Code;
					}
					else
					{
						this._FieldTypeCode = default(int);
					}
					this.SendPropertyChanged("FieldType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveGroupSubGroupFields(ArchiveGroupSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroupField = this;
		}
		
		private void detach_ArchiveGroupSubGroupFields(ArchiveGroupSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroupField = null;
		}
		
		private void attach_CounterFieldSettings(CounterFieldSetting entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroupField = this;
		}
		
		private void detach_CounterFieldSettings(CounterFieldSetting entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroupField = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveGroupSubGroupField")]
	public partial class ArchiveGroupSubGroupField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArchiveGroupFieldID;
		
		private string _Label;
		
		private string _FieldName;
		
		private int _FieldTypeCode;
		
		private int _StatusCode;
		
		private int _BoxTypeCode;
		
		private bool _AutoComplete;
		
		private System.Nullable<int> _MinLength;
		
		private System.Nullable<int> _MaxLength;
		
		private System.Nullable<double> _MinValue;
		
		private System.Nullable<double> _MaxValue;
		
		private string _DefaultValue;
		
		private int _Index;
		
		private EntityRef<ArchiveGroupField> _ArchiveGroupField;
		
		private EntityRef<BoxType> _BoxType;
		
		private EntityRef<FieldStatus> _FieldStatus;
		
		private EntityRef<FieldType> _FieldType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArchiveGroupFieldIDChanging(int value);
    partial void OnArchiveGroupFieldIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnFieldTypeCodeChanging(int value);
    partial void OnFieldTypeCodeChanged();
    partial void OnStatusCodeChanging(int value);
    partial void OnStatusCodeChanged();
    partial void OnBoxTypeCodeChanging(int value);
    partial void OnBoxTypeCodeChanged();
    partial void OnAutoCompleteChanging(bool value);
    partial void OnAutoCompleteChanged();
    partial void OnMinLengthChanging(System.Nullable<int> value);
    partial void OnMinLengthChanged();
    partial void OnMaxLengthChanging(System.Nullable<int> value);
    partial void OnMaxLengthChanged();
    partial void OnMinValueChanging(System.Nullable<double> value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(System.Nullable<double> value);
    partial void OnMaxValueChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    #endregion
		
		public ArchiveGroupSubGroupField()
		{
			this._ArchiveGroupField = default(EntityRef<ArchiveGroupField>);
			this._BoxType = default(EntityRef<BoxType>);
			this._FieldStatus = default(EntityRef<FieldStatus>);
			this._FieldType = default(EntityRef<FieldType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveGroupFieldID", DbType="Int NOT NULL")]
		public int ArchiveGroupFieldID
		{
			get
			{
				return this._ArchiveGroupFieldID;
			}
			set
			{
				if ((this._ArchiveGroupFieldID != value))
				{
					if (this._ArchiveGroupField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveGroupFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveGroupFieldID = value;
					this.SendPropertyChanged("ArchiveGroupFieldID");
					this.OnArchiveGroupFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(MAX)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldTypeCode", DbType="Int NOT NULL")]
		public int FieldTypeCode
		{
			get
			{
				return this._FieldTypeCode;
			}
			set
			{
				if ((this._FieldTypeCode != value))
				{
					if (this._FieldType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._FieldTypeCode = value;
					this.SendPropertyChanged("FieldTypeCode");
					this.OnFieldTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusCode", DbType="Int NOT NULL")]
		public int StatusCode
		{
			get
			{
				return this._StatusCode;
			}
			set
			{
				if ((this._StatusCode != value))
				{
					if (this._FieldStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._StatusCode = value;
					this.SendPropertyChanged("StatusCode");
					this.OnStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxTypeCode", DbType="Int NOT NULL")]
		public int BoxTypeCode
		{
			get
			{
				return this._BoxTypeCode;
			}
			set
			{
				if ((this._BoxTypeCode != value))
				{
					if (this._BoxType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoxTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._BoxTypeCode = value;
					this.SendPropertyChanged("BoxTypeCode");
					this.OnBoxTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoComplete", DbType="Bit NOT NULL")]
		public bool AutoComplete
		{
			get
			{
				return this._AutoComplete;
			}
			set
			{
				if ((this._AutoComplete != value))
				{
					this.OnAutoCompleteChanging(value);
					this.SendPropertyChanging();
					this._AutoComplete = value;
					this.SendPropertyChanged("AutoComplete");
					this.OnAutoCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinLength", DbType="Int")]
		public System.Nullable<int> MinLength
		{
			get
			{
				return this._MinLength;
			}
			set
			{
				if ((this._MinLength != value))
				{
					this.OnMinLengthChanging(value);
					this.SendPropertyChanging();
					this._MinLength = value;
					this.SendPropertyChanged("MinLength");
					this.OnMinLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxLength", DbType="Int")]
		public System.Nullable<int> MaxLength
		{
			get
			{
				return this._MaxLength;
			}
			set
			{
				if ((this._MaxLength != value))
				{
					this.OnMaxLengthChanging(value);
					this.SendPropertyChanging();
					this._MaxLength = value;
					this.SendPropertyChanged("MaxLength");
					this.OnMaxLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="Float")]
		public System.Nullable<double> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Float")]
		public System.Nullable<double> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="NVarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroupField_ArchiveGroupSubGroupField", Storage="_ArchiveGroupField", ThisKey="ArchiveGroupFieldID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ArchiveGroupField ArchiveGroupField
		{
			get
			{
				return this._ArchiveGroupField.Entity;
			}
			set
			{
				ArchiveGroupField previousValue = this._ArchiveGroupField.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveGroupField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveGroupField.Entity = null;
						previousValue.ArchiveGroupSubGroupFields.Remove(this);
					}
					this._ArchiveGroupField.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupSubGroupFields.Add(this);
						this._ArchiveGroupFieldID = value.ID;
					}
					else
					{
						this._ArchiveGroupFieldID = default(int);
					}
					this.SendPropertyChanged("ArchiveGroupField");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoxType_ArchiveGroupSubGroupField", Storage="_BoxType", ThisKey="BoxTypeCode", OtherKey="Code", IsForeignKey=true)]
		public BoxType BoxType
		{
			get
			{
				return this._BoxType.Entity;
			}
			set
			{
				BoxType previousValue = this._BoxType.Entity;
				if (((previousValue != value) 
							|| (this._BoxType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoxType.Entity = null;
						previousValue.ArchiveGroupSubGroupFields.Remove(this);
					}
					this._BoxType.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupSubGroupFields.Add(this);
						this._BoxTypeCode = value.Code;
					}
					else
					{
						this._BoxTypeCode = default(int);
					}
					this.SendPropertyChanged("BoxType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldStatus_ArchiveGroupSubGroupField", Storage="_FieldStatus", ThisKey="StatusCode", OtherKey="Code", IsForeignKey=true)]
		public FieldStatus FieldStatus
		{
			get
			{
				return this._FieldStatus.Entity;
			}
			set
			{
				FieldStatus previousValue = this._FieldStatus.Entity;
				if (((previousValue != value) 
							|| (this._FieldStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldStatus.Entity = null;
						previousValue.ArchiveGroupSubGroupFields.Remove(this);
					}
					this._FieldStatus.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupSubGroupFields.Add(this);
						this._StatusCode = value.Code;
					}
					else
					{
						this._StatusCode = default(int);
					}
					this.SendPropertyChanged("FieldStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_ArchiveGroupSubGroupField", Storage="_FieldType", ThisKey="FieldTypeCode", OtherKey="Code", IsForeignKey=true)]
		public FieldType FieldType
		{
			get
			{
				return this._FieldType.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType.Entity;
				if (((previousValue != value) 
							|| (this._FieldType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType.Entity = null;
						previousValue.ArchiveGroupSubGroupFields.Remove(this);
					}
					this._FieldType.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupSubGroupFields.Add(this);
						this._FieldTypeCode = value.Code;
					}
					else
					{
						this._FieldTypeCode = default(int);
					}
					this.SendPropertyChanged("FieldType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveGroupTab")]
	public partial class ArchiveGroupTab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArchiveGroupID;
		
		private int _TypeCode;
		
		private int _Index;
		
		private string _Title;
		
		private EntitySet<ArchiveGroupField> _ArchiveGroupFields;
		
		private EntityRef<ArchiveGroup> _ArchiveGroup;
		
		private EntityRef<ArchiveGroupTabType> _ArchiveGroupTabType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArchiveGroupIDChanging(int value);
    partial void OnArchiveGroupIDChanged();
    partial void OnTypeCodeChanging(int value);
    partial void OnTypeCodeChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public ArchiveGroupTab()
		{
			this._ArchiveGroupFields = new EntitySet<ArchiveGroupField>(new Action<ArchiveGroupField>(this.attach_ArchiveGroupFields), new Action<ArchiveGroupField>(this.detach_ArchiveGroupFields));
			this._ArchiveGroup = default(EntityRef<ArchiveGroup>);
			this._ArchiveGroupTabType = default(EntityRef<ArchiveGroupTabType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveGroupID", DbType="Int NOT NULL")]
		public int ArchiveGroupID
		{
			get
			{
				return this._ArchiveGroupID;
			}
			set
			{
				if ((this._ArchiveGroupID != value))
				{
					if (this._ArchiveGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveGroupID = value;
					this.SendPropertyChanged("ArchiveGroupID");
					this.OnArchiveGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeCode", DbType="Int NOT NULL")]
		public int TypeCode
		{
			get
			{
				return this._TypeCode;
			}
			set
			{
				if ((this._TypeCode != value))
				{
					if (this._ArchiveGroupTabType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TypeCode = value;
					this.SendPropertyChanged("TypeCode");
					this.OnTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroupTab_ArchiveGroupField", Storage="_ArchiveGroupFields", ThisKey="ID", OtherKey="ArchiveGroupTabID")]
		public EntitySet<ArchiveGroupField> ArchiveGroupFields
		{
			get
			{
				return this._ArchiveGroupFields;
			}
			set
			{
				this._ArchiveGroupFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroup_ArchiveGroupTab", Storage="_ArchiveGroup", ThisKey="ArchiveGroupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ArchiveGroup ArchiveGroup
		{
			get
			{
				return this._ArchiveGroup.Entity;
			}
			set
			{
				ArchiveGroup previousValue = this._ArchiveGroup.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveGroup.Entity = null;
						previousValue.ArchiveGroupTabs.Remove(this);
					}
					this._ArchiveGroup.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupTabs.Add(this);
						this._ArchiveGroupID = value.ID;
					}
					else
					{
						this._ArchiveGroupID = default(int);
					}
					this.SendPropertyChanged("ArchiveGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroupTabType_ArchiveGroupTab", Storage="_ArchiveGroupTabType", ThisKey="TypeCode", OtherKey="Code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ArchiveGroupTabType ArchiveGroupTabType
		{
			get
			{
				return this._ArchiveGroupTabType.Entity;
			}
			set
			{
				ArchiveGroupTabType previousValue = this._ArchiveGroupTabType.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveGroupTabType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveGroupTabType.Entity = null;
						previousValue.ArchiveGroupTabs.Remove(this);
					}
					this._ArchiveGroupTabType.Entity = value;
					if ((value != null))
					{
						value.ArchiveGroupTabs.Add(this);
						this._TypeCode = value.Code;
					}
					else
					{
						this._TypeCode = default(int);
					}
					this.SendPropertyChanged("ArchiveGroupTabType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveGroupFields(ArchiveGroupField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroupTab = this;
		}
		
		private void detach_ArchiveGroupFields(ArchiveGroupField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroupTab = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveGroupTabType")]
	public partial class ArchiveGroupTabType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private EntitySet<ArchiveGroupTab> _ArchiveGroupTabs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public ArchiveGroupTabType()
		{
			this._ArchiveGroupTabs = new EntitySet<ArchiveGroupTab>(new Action<ArchiveGroupTab>(this.attach_ArchiveGroupTabs), new Action<ArchiveGroupTab>(this.detach_ArchiveGroupTabs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroupTabType_ArchiveGroupTab", Storage="_ArchiveGroupTabs", ThisKey="Code", OtherKey="TypeCode")]
		public EntitySet<ArchiveGroupTab> ArchiveGroupTabs
		{
			get
			{
				return this._ArchiveGroupTabs;
			}
			set
			{
				this._ArchiveGroupTabs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveGroupTabs(ArchiveGroupTab entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroupTabType = this;
		}
		
		private void detach_ArchiveGroupTabs(ArchiveGroupTab entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveGroupTabType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveTree")]
	public partial class ArchiveTree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private System.Nullable<int> _ArchiveGroupID;
		
		private System.Nullable<int> _ArchiveID;
		
		private string _Filter;
		
		private string _GroupBy;
		
		private System.Nullable<int> _ParentID;
		
		private int _Index;
		
		private EntitySet<ArchiveTree> _ArchiveTrees;
		
		private EntityRef<ArchiveGroup> _ArchiveGroup;
		
		private EntityRef<Archive> _Archive;
		
		private EntityRef<ArchiveTree> _ArchiveTree1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnArchiveGroupIDChanging(System.Nullable<int> value);
    partial void OnArchiveGroupIDChanged();
    partial void OnArchiveIDChanging(System.Nullable<int> value);
    partial void OnArchiveIDChanged();
    partial void OnFilterChanging(string value);
    partial void OnFilterChanged();
    partial void OnGroupByChanging(string value);
    partial void OnGroupByChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    #endregion
		
		public ArchiveTree()
		{
			this._ArchiveTrees = new EntitySet<ArchiveTree>(new Action<ArchiveTree>(this.attach_ArchiveTrees), new Action<ArchiveTree>(this.detach_ArchiveTrees));
			this._ArchiveGroup = default(EntityRef<ArchiveGroup>);
			this._Archive = default(EntityRef<Archive>);
			this._ArchiveTree1 = default(EntityRef<ArchiveTree>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveGroupID", DbType="Int")]
		public System.Nullable<int> ArchiveGroupID
		{
			get
			{
				return this._ArchiveGroupID;
			}
			set
			{
				if ((this._ArchiveGroupID != value))
				{
					if (this._ArchiveGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveGroupID = value;
					this.SendPropertyChanged("ArchiveGroupID");
					this.OnArchiveGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveID", DbType="Int")]
		public System.Nullable<int> ArchiveID
		{
			get
			{
				return this._ArchiveID;
			}
			set
			{
				if ((this._ArchiveID != value))
				{
					if (this._Archive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveID = value;
					this.SendPropertyChanged("ArchiveID");
					this.OnArchiveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filter", DbType="NVarChar(MAX)")]
		public string Filter
		{
			get
			{
				return this._Filter;
			}
			set
			{
				if ((this._Filter != value))
				{
					this.OnFilterChanging(value);
					this.SendPropertyChanging();
					this._Filter = value;
					this.SendPropertyChanged("Filter");
					this.OnFilterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupBy", DbType="NVarChar(MAX)")]
		public string GroupBy
		{
			get
			{
				return this._GroupBy;
			}
			set
			{
				if ((this._GroupBy != value))
				{
					this.OnGroupByChanging(value);
					this.SendPropertyChanging();
					this._GroupBy = value;
					this.SendPropertyChanged("GroupBy");
					this.OnGroupByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._ArchiveTree1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveTree_ArchiveTree", Storage="_ArchiveTrees", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<ArchiveTree> ArchiveTrees
		{
			get
			{
				return this._ArchiveTrees;
			}
			set
			{
				this._ArchiveTrees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroup_ArchiveTree", Storage="_ArchiveGroup", ThisKey="ArchiveGroupID", OtherKey="ID", IsForeignKey=true)]
		public ArchiveGroup ArchiveGroup
		{
			get
			{
				return this._ArchiveGroup.Entity;
			}
			set
			{
				ArchiveGroup previousValue = this._ArchiveGroup.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveGroup.Entity = null;
						previousValue.ArchiveTrees.Remove(this);
					}
					this._ArchiveGroup.Entity = value;
					if ((value != null))
					{
						value.ArchiveTrees.Add(this);
						this._ArchiveGroupID = value.ID;
					}
					else
					{
						this._ArchiveGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ArchiveGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_ArchiveTree", Storage="_Archive", ThisKey="ArchiveID", OtherKey="ID", IsForeignKey=true)]
		public Archive Archive
		{
			get
			{
				return this._Archive.Entity;
			}
			set
			{
				Archive previousValue = this._Archive.Entity;
				if (((previousValue != value) 
							|| (this._Archive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Archive.Entity = null;
						previousValue.ArchiveTrees.Remove(this);
					}
					this._Archive.Entity = value;
					if ((value != null))
					{
						value.ArchiveTrees.Add(this);
						this._ArchiveID = value.ID;
					}
					else
					{
						this._ArchiveID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Archive");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveTree_ArchiveTree", Storage="_ArchiveTree1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public ArchiveTree ArchiveTree1
		{
			get
			{
				return this._ArchiveTree1.Entity;
			}
			set
			{
				ArchiveTree previousValue = this._ArchiveTree1.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveTree1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveTree1.Entity = null;
						previousValue.ArchiveTrees.Remove(this);
					}
					this._ArchiveTree1.Entity = value;
					if ((value != null))
					{
						value.ArchiveTrees.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ArchiveTree1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveTrees(ArchiveTree entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveTree1 = this;
		}
		
		private void detach_ArchiveTrees(ArchiveTree entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveTree1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoxOfFieldType")]
	public partial class BoxOfFieldType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FieldTypeCode;
		
		private int _BoxTypeCode;
		
		private EntityRef<BoxType> _BoxType;
		
		private EntityRef<FieldType> _FieldType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFieldTypeCodeChanging(int value);
    partial void OnFieldTypeCodeChanged();
    partial void OnBoxTypeCodeChanging(int value);
    partial void OnBoxTypeCodeChanged();
    #endregion
		
		public BoxOfFieldType()
		{
			this._BoxType = default(EntityRef<BoxType>);
			this._FieldType = default(EntityRef<FieldType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldTypeCode", DbType="Int NOT NULL")]
		public int FieldTypeCode
		{
			get
			{
				return this._FieldTypeCode;
			}
			set
			{
				if ((this._FieldTypeCode != value))
				{
					if (this._FieldType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._FieldTypeCode = value;
					this.SendPropertyChanged("FieldTypeCode");
					this.OnFieldTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxTypeCode", DbType="Int NOT NULL")]
		public int BoxTypeCode
		{
			get
			{
				return this._BoxTypeCode;
			}
			set
			{
				if ((this._BoxTypeCode != value))
				{
					if (this._BoxType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoxTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._BoxTypeCode = value;
					this.SendPropertyChanged("BoxTypeCode");
					this.OnBoxTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoxType_BoxOfFieldType", Storage="_BoxType", ThisKey="BoxTypeCode", OtherKey="Code", IsForeignKey=true)]
		public BoxType BoxType
		{
			get
			{
				return this._BoxType.Entity;
			}
			set
			{
				BoxType previousValue = this._BoxType.Entity;
				if (((previousValue != value) 
							|| (this._BoxType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoxType.Entity = null;
						previousValue.BoxOfFieldTypes.Remove(this);
					}
					this._BoxType.Entity = value;
					if ((value != null))
					{
						value.BoxOfFieldTypes.Add(this);
						this._BoxTypeCode = value.Code;
					}
					else
					{
						this._BoxTypeCode = default(int);
					}
					this.SendPropertyChanged("BoxType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_BoxOfFieldType", Storage="_FieldType", ThisKey="FieldTypeCode", OtherKey="Code", IsForeignKey=true)]
		public FieldType FieldType
		{
			get
			{
				return this._FieldType.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType.Entity;
				if (((previousValue != value) 
							|| (this._FieldType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType.Entity = null;
						previousValue.BoxOfFieldTypes.Remove(this);
					}
					this._FieldType.Entity = value;
					if ((value != null))
					{
						value.BoxOfFieldTypes.Add(this);
						this._FieldTypeCode = value.Code;
					}
					else
					{
						this._FieldTypeCode = default(int);
					}
					this.SendPropertyChanged("FieldType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoxType")]
	public partial class BoxType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private EntitySet<ArchiveGroupField> _ArchiveGroupFields;
		
		private EntitySet<ArchiveGroupSubGroupField> _ArchiveGroupSubGroupFields;
		
		private EntitySet<BoxOfFieldType> _BoxOfFieldTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public BoxType()
		{
			this._ArchiveGroupFields = new EntitySet<ArchiveGroupField>(new Action<ArchiveGroupField>(this.attach_ArchiveGroupFields), new Action<ArchiveGroupField>(this.detach_ArchiveGroupFields));
			this._ArchiveGroupSubGroupFields = new EntitySet<ArchiveGroupSubGroupField>(new Action<ArchiveGroupSubGroupField>(this.attach_ArchiveGroupSubGroupFields), new Action<ArchiveGroupSubGroupField>(this.detach_ArchiveGroupSubGroupFields));
			this._BoxOfFieldTypes = new EntitySet<BoxOfFieldType>(new Action<BoxOfFieldType>(this.attach_BoxOfFieldTypes), new Action<BoxOfFieldType>(this.detach_BoxOfFieldTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoxType_ArchiveGroupField", Storage="_ArchiveGroupFields", ThisKey="Code", OtherKey="BoxTypeCode")]
		public EntitySet<ArchiveGroupField> ArchiveGroupFields
		{
			get
			{
				return this._ArchiveGroupFields;
			}
			set
			{
				this._ArchiveGroupFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoxType_ArchiveGroupSubGroupField", Storage="_ArchiveGroupSubGroupFields", ThisKey="Code", OtherKey="BoxTypeCode")]
		public EntitySet<ArchiveGroupSubGroupField> ArchiveGroupSubGroupFields
		{
			get
			{
				return this._ArchiveGroupSubGroupFields;
			}
			set
			{
				this._ArchiveGroupSubGroupFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoxType_BoxOfFieldType", Storage="_BoxOfFieldTypes", ThisKey="Code", OtherKey="BoxTypeCode")]
		public EntitySet<BoxOfFieldType> BoxOfFieldTypes
		{
			get
			{
				return this._BoxOfFieldTypes;
			}
			set
			{
				this._BoxOfFieldTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveGroupFields(ArchiveGroupField entity)
		{
			this.SendPropertyChanging();
			entity.BoxType = this;
		}
		
		private void detach_ArchiveGroupFields(ArchiveGroupField entity)
		{
			this.SendPropertyChanging();
			entity.BoxType = null;
		}
		
		private void attach_ArchiveGroupSubGroupFields(ArchiveGroupSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.BoxType = this;
		}
		
		private void detach_ArchiveGroupSubGroupFields(ArchiveGroupSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.BoxType = null;
		}
		
		private void attach_BoxOfFieldTypes(BoxOfFieldType entity)
		{
			this.SendPropertyChanging();
			entity.BoxType = this;
		}
		
		private void detach_BoxOfFieldTypes(BoxOfFieldType entity)
		{
			this.SendPropertyChanging();
			entity.BoxType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CounterFieldSetting")]
	public partial class CounterFieldSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArchiveGroupFieldID;
		
		private int _FixedValueType;
		
		private string _FixedValue;
		
		private string _Separator;
		
		private EntityRef<ArchiveGroupField> _ArchiveGroupField;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArchiveGroupFieldIDChanging(int value);
    partial void OnArchiveGroupFieldIDChanged();
    partial void OnFixedValueTypeChanging(int value);
    partial void OnFixedValueTypeChanged();
    partial void OnFixedValueChanging(string value);
    partial void OnFixedValueChanged();
    partial void OnSeparatorChanging(string value);
    partial void OnSeparatorChanged();
    #endregion
		
		public CounterFieldSetting()
		{
			this._ArchiveGroupField = default(EntityRef<ArchiveGroupField>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveGroupFieldID", DbType="Int NOT NULL")]
		public int ArchiveGroupFieldID
		{
			get
			{
				return this._ArchiveGroupFieldID;
			}
			set
			{
				if ((this._ArchiveGroupFieldID != value))
				{
					if (this._ArchiveGroupField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveGroupFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveGroupFieldID = value;
					this.SendPropertyChanged("ArchiveGroupFieldID");
					this.OnArchiveGroupFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedValueType", DbType="Int NOT NULL")]
		public int FixedValueType
		{
			get
			{
				return this._FixedValueType;
			}
			set
			{
				if ((this._FixedValueType != value))
				{
					this.OnFixedValueTypeChanging(value);
					this.SendPropertyChanging();
					this._FixedValueType = value;
					this.SendPropertyChanged("FixedValueType");
					this.OnFixedValueTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedValue", DbType="NVarChar(50)")]
		public string FixedValue
		{
			get
			{
				return this._FixedValue;
			}
			set
			{
				if ((this._FixedValue != value))
				{
					this.OnFixedValueChanging(value);
					this.SendPropertyChanging();
					this._FixedValue = value;
					this.SendPropertyChanged("FixedValue");
					this.OnFixedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Separator", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Separator
		{
			get
			{
				return this._Separator;
			}
			set
			{
				if ((this._Separator != value))
				{
					this.OnSeparatorChanging(value);
					this.SendPropertyChanging();
					this._Separator = value;
					this.SendPropertyChanged("Separator");
					this.OnSeparatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveGroupField_CounterFieldSetting", Storage="_ArchiveGroupField", ThisKey="ArchiveGroupFieldID", OtherKey="ID", IsForeignKey=true)]
		public ArchiveGroupField ArchiveGroupField
		{
			get
			{
				return this._ArchiveGroupField.Entity;
			}
			set
			{
				ArchiveGroupField previousValue = this._ArchiveGroupField.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveGroupField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveGroupField.Entity = null;
						previousValue.CounterFieldSettings.Remove(this);
					}
					this._ArchiveGroupField.Entity = value;
					if ((value != null))
					{
						value.CounterFieldSettings.Add(this);
						this._ArchiveGroupFieldID = value.ID;
					}
					else
					{
						this._ArchiveGroupFieldID = default(int);
					}
					this.SendPropertyChanged("ArchiveGroupField");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DatabaseVersion")]
	public partial class DatabaseVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Version;
		
		private System.Nullable<System.Guid> _ApplicationID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnApplicationIDChanging(System.Nullable<System.Guid> value);
    partial void OnApplicationIDChanged();
    #endregion
		
		public DatabaseVersion()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldStatus")]
	public partial class FieldStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private EntitySet<ArchiveGroupField> _ArchiveGroupFields;
		
		private EntitySet<ArchiveGroupSubGroupField> _ArchiveGroupSubGroupFields;
		
		private EntitySet<StatusOfFieldType> _StatusOfFieldTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public FieldStatus()
		{
			this._ArchiveGroupFields = new EntitySet<ArchiveGroupField>(new Action<ArchiveGroupField>(this.attach_ArchiveGroupFields), new Action<ArchiveGroupField>(this.detach_ArchiveGroupFields));
			this._ArchiveGroupSubGroupFields = new EntitySet<ArchiveGroupSubGroupField>(new Action<ArchiveGroupSubGroupField>(this.attach_ArchiveGroupSubGroupFields), new Action<ArchiveGroupSubGroupField>(this.detach_ArchiveGroupSubGroupFields));
			this._StatusOfFieldTypes = new EntitySet<StatusOfFieldType>(new Action<StatusOfFieldType>(this.attach_StatusOfFieldTypes), new Action<StatusOfFieldType>(this.detach_StatusOfFieldTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldStatus_ArchiveGroupField", Storage="_ArchiveGroupFields", ThisKey="Code", OtherKey="StatusCode")]
		public EntitySet<ArchiveGroupField> ArchiveGroupFields
		{
			get
			{
				return this._ArchiveGroupFields;
			}
			set
			{
				this._ArchiveGroupFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldStatus_ArchiveGroupSubGroupField", Storage="_ArchiveGroupSubGroupFields", ThisKey="Code", OtherKey="StatusCode")]
		public EntitySet<ArchiveGroupSubGroupField> ArchiveGroupSubGroupFields
		{
			get
			{
				return this._ArchiveGroupSubGroupFields;
			}
			set
			{
				this._ArchiveGroupSubGroupFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldStatus_StatusOfFieldType", Storage="_StatusOfFieldTypes", ThisKey="Code", OtherKey="StatusCode")]
		public EntitySet<StatusOfFieldType> StatusOfFieldTypes
		{
			get
			{
				return this._StatusOfFieldTypes;
			}
			set
			{
				this._StatusOfFieldTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveGroupFields(ArchiveGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldStatus = this;
		}
		
		private void detach_ArchiveGroupFields(ArchiveGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldStatus = null;
		}
		
		private void attach_ArchiveGroupSubGroupFields(ArchiveGroupSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldStatus = this;
		}
		
		private void detach_ArchiveGroupSubGroupFields(ArchiveGroupSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldStatus = null;
		}
		
		private void attach_StatusOfFieldTypes(StatusOfFieldType entity)
		{
			this.SendPropertyChanging();
			entity.FieldStatus = this;
		}
		
		private void detach_StatusOfFieldTypes(StatusOfFieldType entity)
		{
			this.SendPropertyChanging();
			entity.FieldStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldType")]
	public partial class FieldType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private int _Index;
		
		private EntitySet<ArchiveGroupField> _ArchiveGroupFields;
		
		private EntitySet<ArchiveGroupSubGroupField> _ArchiveGroupSubGroupFields;
		
		private EntitySet<BoxOfFieldType> _BoxOfFieldTypes;
		
		private EntitySet<StatusOfFieldType> _StatusOfFieldTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    #endregion
		
		public FieldType()
		{
			this._ArchiveGroupFields = new EntitySet<ArchiveGroupField>(new Action<ArchiveGroupField>(this.attach_ArchiveGroupFields), new Action<ArchiveGroupField>(this.detach_ArchiveGroupFields));
			this._ArchiveGroupSubGroupFields = new EntitySet<ArchiveGroupSubGroupField>(new Action<ArchiveGroupSubGroupField>(this.attach_ArchiveGroupSubGroupFields), new Action<ArchiveGroupSubGroupField>(this.detach_ArchiveGroupSubGroupFields));
			this._BoxOfFieldTypes = new EntitySet<BoxOfFieldType>(new Action<BoxOfFieldType>(this.attach_BoxOfFieldTypes), new Action<BoxOfFieldType>(this.detach_BoxOfFieldTypes));
			this._StatusOfFieldTypes = new EntitySet<StatusOfFieldType>(new Action<StatusOfFieldType>(this.attach_StatusOfFieldTypes), new Action<StatusOfFieldType>(this.detach_StatusOfFieldTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_ArchiveGroupField", Storage="_ArchiveGroupFields", ThisKey="Code", OtherKey="FieldTypeCode")]
		public EntitySet<ArchiveGroupField> ArchiveGroupFields
		{
			get
			{
				return this._ArchiveGroupFields;
			}
			set
			{
				this._ArchiveGroupFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_ArchiveGroupSubGroupField", Storage="_ArchiveGroupSubGroupFields", ThisKey="Code", OtherKey="FieldTypeCode")]
		public EntitySet<ArchiveGroupSubGroupField> ArchiveGroupSubGroupFields
		{
			get
			{
				return this._ArchiveGroupSubGroupFields;
			}
			set
			{
				this._ArchiveGroupSubGroupFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_BoxOfFieldType", Storage="_BoxOfFieldTypes", ThisKey="Code", OtherKey="FieldTypeCode")]
		public EntitySet<BoxOfFieldType> BoxOfFieldTypes
		{
			get
			{
				return this._BoxOfFieldTypes;
			}
			set
			{
				this._BoxOfFieldTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_StatusOfFieldType", Storage="_StatusOfFieldTypes", ThisKey="Code", OtherKey="FieldTypeCode")]
		public EntitySet<StatusOfFieldType> StatusOfFieldTypes
		{
			get
			{
				return this._StatusOfFieldTypes;
			}
			set
			{
				this._StatusOfFieldTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveGroupFields(ArchiveGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = this;
		}
		
		private void detach_ArchiveGroupFields(ArchiveGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = null;
		}
		
		private void attach_ArchiveGroupSubGroupFields(ArchiveGroupSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = this;
		}
		
		private void detach_ArchiveGroupSubGroupFields(ArchiveGroupSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = null;
		}
		
		private void attach_BoxOfFieldTypes(BoxOfFieldType entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = this;
		}
		
		private void detach_BoxOfFieldTypes(BoxOfFieldType entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = null;
		}
		
		private void attach_StatusOfFieldTypes(StatusOfFieldType entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = this;
		}
		
		private void detach_StatusOfFieldTypes(StatusOfFieldType entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FormState")]
	public partial class FormState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MachineName;
		
		private string _FormName;
		
		private int _WindowState;
		
		private int _Width;
		
		private int _Height;
		
		private int _X;
		
		private int _Y;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    partial void OnWindowStateChanging(int value);
    partial void OnWindowStateChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    partial void OnXChanging(int value);
    partial void OnXChanged();
    partial void OnYChanging(int value);
    partial void OnYChanged();
    #endregion
		
		public FormState()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindowState", DbType="Int NOT NULL")]
		public int WindowState
		{
			get
			{
				return this._WindowState;
			}
			set
			{
				if ((this._WindowState != value))
				{
					this.OnWindowStateChanging(value);
					this.SendPropertyChanging();
					this._WindowState = value;
					this.SendPropertyChanged("WindowState");
					this.OnWindowStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Int NOT NULL")]
		public int X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Int NOT NULL")]
		public int Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProgramSetting")]
	public partial class ProgramSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _ShowBackupFormOnExit;
		
		private string _ExpiryDate;
		
		private string _LastRunDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShowBackupFormOnExitChanging(bool value);
    partial void OnShowBackupFormOnExitChanged();
    partial void OnExpiryDateChanging(string value);
    partial void OnExpiryDateChanged();
    partial void OnLastRunDateChanging(string value);
    partial void OnLastRunDateChanged();
    #endregion
		
		public ProgramSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowBackupFormOnExit", DbType="Bit NOT NULL")]
		public bool ShowBackupFormOnExit
		{
			get
			{
				return this._ShowBackupFormOnExit;
			}
			set
			{
				if ((this._ShowBackupFormOnExit != value))
				{
					this.OnShowBackupFormOnExitChanging(value);
					this.SendPropertyChanging();
					this._ShowBackupFormOnExit = value;
					this.SendPropertyChanged("ShowBackupFormOnExit");
					this.OnShowBackupFormOnExitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiryDate", DbType="NVarChar(MAX)")]
		public string ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastRunDate", DbType="NVarChar(MAX)")]
		public string LastRunDate
		{
			get
			{
				return this._LastRunDate;
			}
			set
			{
				if ((this._LastRunDate != value))
				{
					this.OnLastRunDateChanging(value);
					this.SendPropertyChanging();
					this._LastRunDate = value;
					this.SendPropertyChanged("LastRunDate");
					this.OnLastRunDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusOfFieldType")]
	public partial class StatusOfFieldType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FieldTypeCode;
		
		private int _StatusCode;
		
		private EntityRef<FieldStatus> _FieldStatus;
		
		private EntityRef<FieldType> _FieldType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFieldTypeCodeChanging(int value);
    partial void OnFieldTypeCodeChanged();
    partial void OnStatusCodeChanging(int value);
    partial void OnStatusCodeChanged();
    #endregion
		
		public StatusOfFieldType()
		{
			this._FieldStatus = default(EntityRef<FieldStatus>);
			this._FieldType = default(EntityRef<FieldType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldTypeCode", DbType="Int NOT NULL")]
		public int FieldTypeCode
		{
			get
			{
				return this._FieldTypeCode;
			}
			set
			{
				if ((this._FieldTypeCode != value))
				{
					if (this._FieldType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._FieldTypeCode = value;
					this.SendPropertyChanged("FieldTypeCode");
					this.OnFieldTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusCode", DbType="Int NOT NULL")]
		public int StatusCode
		{
			get
			{
				return this._StatusCode;
			}
			set
			{
				if ((this._StatusCode != value))
				{
					if (this._FieldStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._StatusCode = value;
					this.SendPropertyChanged("StatusCode");
					this.OnStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldStatus_StatusOfFieldType", Storage="_FieldStatus", ThisKey="StatusCode", OtherKey="Code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FieldStatus FieldStatus
		{
			get
			{
				return this._FieldStatus.Entity;
			}
			set
			{
				FieldStatus previousValue = this._FieldStatus.Entity;
				if (((previousValue != value) 
							|| (this._FieldStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldStatus.Entity = null;
						previousValue.StatusOfFieldTypes.Remove(this);
					}
					this._FieldStatus.Entity = value;
					if ((value != null))
					{
						value.StatusOfFieldTypes.Add(this);
						this._StatusCode = value.Code;
					}
					else
					{
						this._StatusCode = default(int);
					}
					this.SendPropertyChanged("FieldStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_StatusOfFieldType", Storage="_FieldType", ThisKey="FieldTypeCode", OtherKey="Code", IsForeignKey=true)]
		public FieldType FieldType
		{
			get
			{
				return this._FieldType.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType.Entity;
				if (((previousValue != value) 
							|| (this._FieldType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType.Entity = null;
						previousValue.StatusOfFieldTypes.Remove(this);
					}
					this._FieldType.Entity = value;
					if ((value != null))
					{
						value.StatusOfFieldTypes.Add(this);
						this._FieldTypeCode = value.Code;
					}
					else
					{
						this._FieldTypeCode = default(int);
					}
					this.SendPropertyChanged("FieldType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskSchedule")]
	public partial class TaskSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TaskCode;
		
		private string _Name;
		
		private string _Description;
		
		private string _AdditionalInfo;
		
		private int _RepeatTypeCode;
		
		private int _ScheduleTypeCode;
		
		private string _BackupPath;
		
		private string _BackupFileName;
		
		private System.Nullable<int> _BackupNameType;
		
		private string _ExecuteFilePath;
		
		private string _ExecuteParameter;
		
		private string _MessageTitle;
		
		private string _MessageBody;
		
		private string _StartDate;
		
		private string _StartTime;
		
		private string _EndDate;
		
		private string _EndTime;
		
		private string _ExecuteTime;
		
		private string _WeekDays;
		
		private string _Months;
		
		private System.Nullable<int> _MonthDay;
		
		private bool _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTaskCodeChanging(string value);
    partial void OnTaskCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAdditionalInfoChanging(string value);
    partial void OnAdditionalInfoChanged();
    partial void OnRepeatTypeCodeChanging(int value);
    partial void OnRepeatTypeCodeChanged();
    partial void OnScheduleTypeCodeChanging(int value);
    partial void OnScheduleTypeCodeChanged();
    partial void OnBackupPathChanging(string value);
    partial void OnBackupPathChanged();
    partial void OnBackupFileNameChanging(string value);
    partial void OnBackupFileNameChanged();
    partial void OnBackupNameTypeChanging(System.Nullable<int> value);
    partial void OnBackupNameTypeChanged();
    partial void OnExecuteFilePathChanging(string value);
    partial void OnExecuteFilePathChanged();
    partial void OnExecuteParameterChanging(string value);
    partial void OnExecuteParameterChanged();
    partial void OnMessageTitleChanging(string value);
    partial void OnMessageTitleChanged();
    partial void OnMessageBodyChanging(string value);
    partial void OnMessageBodyChanged();
    partial void OnStartDateChanging(string value);
    partial void OnStartDateChanged();
    partial void OnStartTimeChanging(string value);
    partial void OnStartTimeChanged();
    partial void OnEndDateChanging(string value);
    partial void OnEndDateChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    partial void OnExecuteTimeChanging(string value);
    partial void OnExecuteTimeChanged();
    partial void OnWeekDaysChanging(string value);
    partial void OnWeekDaysChanged();
    partial void OnMonthsChanging(string value);
    partial void OnMonthsChanged();
    partial void OnMonthDayChanging(System.Nullable<int> value);
    partial void OnMonthDayChanged();
    partial void OnFlagChanging(bool value);
    partial void OnFlagChanged();
    #endregion
		
		public TaskSchedule()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TaskCode
		{
			get
			{
				return this._TaskCode;
			}
			set
			{
				if ((this._TaskCode != value))
				{
					this.OnTaskCodeChanging(value);
					this.SendPropertyChanging();
					this._TaskCode = value;
					this.SendPropertyChanged("TaskCode");
					this.OnTaskCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalInfo", DbType="NVarChar(MAX)")]
		public string AdditionalInfo
		{
			get
			{
				return this._AdditionalInfo;
			}
			set
			{
				if ((this._AdditionalInfo != value))
				{
					this.OnAdditionalInfoChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInfo = value;
					this.SendPropertyChanged("AdditionalInfo");
					this.OnAdditionalInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepeatTypeCode", DbType="Int NOT NULL")]
		public int RepeatTypeCode
		{
			get
			{
				return this._RepeatTypeCode;
			}
			set
			{
				if ((this._RepeatTypeCode != value))
				{
					this.OnRepeatTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._RepeatTypeCode = value;
					this.SendPropertyChanged("RepeatTypeCode");
					this.OnRepeatTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleTypeCode", DbType="Int NOT NULL")]
		public int ScheduleTypeCode
		{
			get
			{
				return this._ScheduleTypeCode;
			}
			set
			{
				if ((this._ScheduleTypeCode != value))
				{
					this.OnScheduleTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._ScheduleTypeCode = value;
					this.SendPropertyChanged("ScheduleTypeCode");
					this.OnScheduleTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackupPath", DbType="NVarChar(256)")]
		public string BackupPath
		{
			get
			{
				return this._BackupPath;
			}
			set
			{
				if ((this._BackupPath != value))
				{
					this.OnBackupPathChanging(value);
					this.SendPropertyChanging();
					this._BackupPath = value;
					this.SendPropertyChanged("BackupPath");
					this.OnBackupPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackupFileName", DbType="NVarChar(50)")]
		public string BackupFileName
		{
			get
			{
				return this._BackupFileName;
			}
			set
			{
				if ((this._BackupFileName != value))
				{
					this.OnBackupFileNameChanging(value);
					this.SendPropertyChanging();
					this._BackupFileName = value;
					this.SendPropertyChanged("BackupFileName");
					this.OnBackupFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackupNameType", DbType="Int")]
		public System.Nullable<int> BackupNameType
		{
			get
			{
				return this._BackupNameType;
			}
			set
			{
				if ((this._BackupNameType != value))
				{
					this.OnBackupNameTypeChanging(value);
					this.SendPropertyChanging();
					this._BackupNameType = value;
					this.SendPropertyChanged("BackupNameType");
					this.OnBackupNameTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecuteFilePath", DbType="NVarChar(256)")]
		public string ExecuteFilePath
		{
			get
			{
				return this._ExecuteFilePath;
			}
			set
			{
				if ((this._ExecuteFilePath != value))
				{
					this.OnExecuteFilePathChanging(value);
					this.SendPropertyChanging();
					this._ExecuteFilePath = value;
					this.SendPropertyChanged("ExecuteFilePath");
					this.OnExecuteFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecuteParameter", DbType="NVarChar(50)")]
		public string ExecuteParameter
		{
			get
			{
				return this._ExecuteParameter;
			}
			set
			{
				if ((this._ExecuteParameter != value))
				{
					this.OnExecuteParameterChanging(value);
					this.SendPropertyChanging();
					this._ExecuteParameter = value;
					this.SendPropertyChanged("ExecuteParameter");
					this.OnExecuteParameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageTitle", DbType="NVarChar(MAX)")]
		public string MessageTitle
		{
			get
			{
				return this._MessageTitle;
			}
			set
			{
				if ((this._MessageTitle != value))
				{
					this.OnMessageTitleChanging(value);
					this.SendPropertyChanging();
					this._MessageTitle = value;
					this.SendPropertyChanged("MessageTitle");
					this.OnMessageTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageBody", DbType="NVarChar(MAX)")]
		public string MessageBody
		{
			get
			{
				return this._MessageBody;
			}
			set
			{
				if ((this._MessageBody != value))
				{
					this.OnMessageBodyChanging(value);
					this.SendPropertyChanging();
					this._MessageBody = value;
					this.SendPropertyChanged("MessageBody");
					this.OnMessageBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Char(10)")]
		public string StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Char(5)")]
		public string StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Char(10)")]
		public string EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Char(5)")]
		public string EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecuteTime", DbType="Char(5)")]
		public string ExecuteTime
		{
			get
			{
				return this._ExecuteTime;
			}
			set
			{
				if ((this._ExecuteTime != value))
				{
					this.OnExecuteTimeChanging(value);
					this.SendPropertyChanging();
					this._ExecuteTime = value;
					this.SendPropertyChanged("ExecuteTime");
					this.OnExecuteTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDays", DbType="NVarChar(250)")]
		public string WeekDays
		{
			get
			{
				return this._WeekDays;
			}
			set
			{
				if ((this._WeekDays != value))
				{
					this.OnWeekDaysChanging(value);
					this.SendPropertyChanging();
					this._WeekDays = value;
					this.SendPropertyChanged("WeekDays");
					this.OnWeekDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Months", DbType="NVarChar(250)")]
		public string Months
		{
			get
			{
				return this._Months;
			}
			set
			{
				if ((this._Months != value))
				{
					this.OnMonthsChanging(value);
					this.SendPropertyChanging();
					this._Months = value;
					this.SendPropertyChanged("Months");
					this.OnMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthDay", DbType="Int")]
		public System.Nullable<int> MonthDay
		{
			get
			{
				return this._MonthDay;
			}
			set
			{
				if ((this._MonthDay != value))
				{
					this.OnMonthDayChanging(value);
					this.SendPropertyChanging();
					this._MonthDay = value;
					this.SendPropertyChanged("MonthDay");
					this.OnMonthDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag", DbType="Bit NOT NULL")]
		public bool Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _UserName;
		
		private string _Password;
		
		private string _FullName;
		
		private string _NikName;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private string _RoleCode;
		
		private string _StateCode;
		
		private string _Visible;
		
		private bool _isLogin;
		
		private bool _isGuest;
		
		private System.Nullable<System.DateTime> _Expire;
		
		private string _IPAddress;
		
		private EntitySet<UserAccessPermission> _UserAccessPermissions;
		
		private EntitySet<UserLog> _UserLogs;
		
		private EntityRef<UserSetting> _UserSetting;
		
		private EntitySet<DocumentsFailure> _DocumentsFailures;
		
		private EntitySet<DocumentsFailure> _DocumentsFailures1;
		
		private EntitySet<PermissionSecurity> _PermissionSecurities;
		
		private EntitySet<PermissionTitle> _PermissionTitles;
		
		private EntitySet<PermissionDossier> _PermissionDossiers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnNikNameChanging(string value);
    partial void OnNikNameChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    partial void OnRoleCodeChanging(string value);
    partial void OnRoleCodeChanged();
    partial void OnStateCodeChanging(string value);
    partial void OnStateCodeChanged();
    partial void OnVisibleChanging(string value);
    partial void OnVisibleChanged();
    partial void OnisLoginChanging(bool value);
    partial void OnisLoginChanged();
    partial void OnisGuestChanging(bool value);
    partial void OnisGuestChanged();
    partial void OnExpireChanging(System.Nullable<System.DateTime> value);
    partial void OnExpireChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    #endregion
		
		public User()
		{
			this._UserAccessPermissions = new EntitySet<UserAccessPermission>(new Action<UserAccessPermission>(this.attach_UserAccessPermissions), new Action<UserAccessPermission>(this.detach_UserAccessPermissions));
			this._UserLogs = new EntitySet<UserLog>(new Action<UserLog>(this.attach_UserLogs), new Action<UserLog>(this.detach_UserLogs));
			this._UserSetting = default(EntityRef<UserSetting>);
			this._DocumentsFailures = new EntitySet<DocumentsFailure>(new Action<DocumentsFailure>(this.attach_DocumentsFailures), new Action<DocumentsFailure>(this.detach_DocumentsFailures));
			this._DocumentsFailures1 = new EntitySet<DocumentsFailure>(new Action<DocumentsFailure>(this.attach_DocumentsFailures1), new Action<DocumentsFailure>(this.detach_DocumentsFailures1));
			this._PermissionSecurities = new EntitySet<PermissionSecurity>(new Action<PermissionSecurity>(this.attach_PermissionSecurities), new Action<PermissionSecurity>(this.detach_PermissionSecurities));
			this._PermissionTitles = new EntitySet<PermissionTitle>(new Action<PermissionTitle>(this.attach_PermissionTitles), new Action<PermissionTitle>(this.detach_PermissionTitles));
			this._PermissionDossiers = new EntitySet<PermissionDossier>(new Action<PermissionDossier>(this.attach_PermissionDossiers), new Action<PermissionDossier>(this.detach_PermissionDossiers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NikName", DbType="NVarChar(250)")]
		public string NikName
		{
			get
			{
				return this._NikName;
			}
			set
			{
				if ((this._NikName != value))
				{
					this.OnNikNameChanging(value);
					this.SendPropertyChanging();
					this._NikName = value;
					this.SendPropertyChanged("NikName");
					this.OnNikNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogin", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RoleCode
		{
			get
			{
				return this._RoleCode;
			}
			set
			{
				if ((this._RoleCode != value))
				{
					this.OnRoleCodeChanging(value);
					this.SendPropertyChanging();
					this._RoleCode = value;
					this.SendPropertyChanged("RoleCode");
					this.OnRoleCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StateCode
		{
			get
			{
				return this._StateCode;
			}
			set
			{
				if ((this._StateCode != value))
				{
					this.OnStateCodeChanging(value);
					this.SendPropertyChanging();
					this._StateCode = value;
					this.SendPropertyChanged("StateCode");
					this.OnStateCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLogin")]
		public bool isLogin
		{
			get
			{
				return this._isLogin;
			}
			set
			{
				if ((this._isLogin != value))
				{
					this.OnisLoginChanging(value);
					this.SendPropertyChanging();
					this._isLogin = value;
					this.SendPropertyChanged("isLogin");
					this.OnisLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isGuest")]
		public bool isGuest
		{
			get
			{
				return this._isGuest;
			}
			set
			{
				if ((this._isGuest != value))
				{
					this.OnisGuestChanging(value);
					this.SendPropertyChanging();
					this._isGuest = value;
					this.SendPropertyChanged("isGuest");
					this.OnisGuestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expire")]
		public System.Nullable<System.DateTime> Expire
		{
			get
			{
				return this._Expire;
			}
			set
			{
				if ((this._Expire != value))
				{
					this.OnExpireChanging(value);
					this.SendPropertyChanging();
					this._Expire = value;
					this.SendPropertyChanged("Expire");
					this.OnExpireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress")]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserAccessPermission", Storage="_UserAccessPermissions", ThisKey="Code", OtherKey="UserCode")]
		public EntitySet<UserAccessPermission> UserAccessPermissions
		{
			get
			{
				return this._UserAccessPermissions;
			}
			set
			{
				this._UserAccessPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLog", Storage="_UserLogs", ThisKey="Code", OtherKey="UserCode")]
		public EntitySet<UserLog> UserLogs
		{
			get
			{
				return this._UserLogs;
			}
			set
			{
				this._UserLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSetting", Storage="_UserSetting", ThisKey="Code", OtherKey="UserCode", IsUnique=true, IsForeignKey=false)]
		public UserSetting UserSetting
		{
			get
			{
				return this._UserSetting.Entity;
			}
			set
			{
				UserSetting previousValue = this._UserSetting.Entity;
				if (((previousValue != value) 
							|| (this._UserSetting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserSetting.Entity = null;
						previousValue.User = null;
					}
					this._UserSetting.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("UserSetting");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DocumentsFailure", Storage="_DocumentsFailures", ThisKey="Code", OtherKey="UserSender")]
		public EntitySet<DocumentsFailure> DocumentsFailures
		{
			get
			{
				return this._DocumentsFailures;
			}
			set
			{
				this._DocumentsFailures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DocumentsFailure1", Storage="_DocumentsFailures1", ThisKey="Code", OtherKey="Userchecker")]
		public EntitySet<DocumentsFailure> DocumentsFailures1
		{
			get
			{
				return this._DocumentsFailures1;
			}
			set
			{
				this._DocumentsFailures1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PermissionSecurity", Storage="_PermissionSecurities", ThisKey="Code", OtherKey="PK_User")]
		public EntitySet<PermissionSecurity> PermissionSecurities
		{
			get
			{
				return this._PermissionSecurities;
			}
			set
			{
				this._PermissionSecurities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PermissionTitle", Storage="_PermissionTitles", ThisKey="Code", OtherKey="PK_User")]
		public EntitySet<PermissionTitle> PermissionTitles
		{
			get
			{
				return this._PermissionTitles;
			}
			set
			{
				this._PermissionTitles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PermissionDossier", Storage="_PermissionDossiers", ThisKey="Code", OtherKey="PK_User")]
		public EntitySet<PermissionDossier> PermissionDossiers
		{
			get
			{
				return this._PermissionDossiers;
			}
			set
			{
				this._PermissionDossiers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserAccessPermissions(UserAccessPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserAccessPermissions(UserAccessPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserLogs(UserLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLogs(UserLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_DocumentsFailures(DocumentsFailure entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DocumentsFailures(DocumentsFailure entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_DocumentsFailures1(DocumentsFailure entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_DocumentsFailures1(DocumentsFailure entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_PermissionSecurities(PermissionSecurity entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PermissionSecurities(PermissionSecurity entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PermissionTitles(PermissionTitle entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PermissionTitles(PermissionTitle entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PermissionDossiers(PermissionDossier entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PermissionDossiers(PermissionDossier entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAccessPermission")]
	public partial class UserAccessPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ItemCode;
		
		private int _UserCode;
		
		private string _Allow;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnUserCodeChanging(int value);
    partial void OnUserCodeChanged();
    partial void OnAllowChanging(string value);
    partial void OnAllowChanged();
    #endregion
		
		public UserAccessPermission()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCode", DbType="Int NOT NULL")]
		public int UserCode
		{
			get
			{
				return this._UserCode;
			}
			set
			{
				if ((this._UserCode != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCodeChanging(value);
					this.SendPropertyChanging();
					this._UserCode = value;
					this.SendPropertyChanged("UserCode");
					this.OnUserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allow", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Allow
		{
			get
			{
				return this._Allow;
			}
			set
			{
				if ((this._Allow != value))
				{
					this.OnAllowChanging(value);
					this.SendPropertyChanging();
					this._Allow = value;
					this.SendPropertyChanged("Allow");
					this.OnAllowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserAccessPermission", Storage="_User", ThisKey="UserCode", OtherKey="Code", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserAccessPermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserAccessPermissions.Add(this);
						this._UserCode = value.Code;
					}
					else
					{
						this._UserCode = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLog")]
	public partial class UserLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserCode;
		
		private string _OperationPlaceCode;
		
		private string _OperationCode;
		
		private string _Code;
		
		private string _Description;
		
		private string _Date;
		
		private string _Time;
		
		private System.Nullable<int> _ArchiveID;
		
		private string _IPAddress;
		
		private EntityRef<Archive> _Archive;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserCodeChanging(int value);
    partial void OnUserCodeChanged();
    partial void OnOperationPlaceCodeChanging(string value);
    partial void OnOperationPlaceCodeChanged();
    partial void OnOperationCodeChanging(string value);
    partial void OnOperationCodeChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnArchiveIDChanging(System.Nullable<int> value);
    partial void OnArchiveIDChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    #endregion
		
		public UserLog()
		{
			this._Archive = default(EntityRef<Archive>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCode", DbType="Int NOT NULL")]
		public int UserCode
		{
			get
			{
				return this._UserCode;
			}
			set
			{
				if ((this._UserCode != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCodeChanging(value);
					this.SendPropertyChanging();
					this._UserCode = value;
					this.SendPropertyChanged("UserCode");
					this.OnUserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationPlaceCode", DbType="NVarChar(50)")]
		public string OperationPlaceCode
		{
			get
			{
				return this._OperationPlaceCode;
			}
			set
			{
				if ((this._OperationPlaceCode != value))
				{
					this.OnOperationPlaceCodeChanging(value);
					this.SendPropertyChanging();
					this._OperationPlaceCode = value;
					this.SendPropertyChanged("OperationPlaceCode");
					this.OnOperationPlaceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string OperationCode
		{
			get
			{
				return this._OperationCode;
			}
			set
			{
				if ((this._OperationCode != value))
				{
					this.OnOperationCodeChanging(value);
					this.SendPropertyChanging();
					this._OperationCode = value;
					this.SendPropertyChanged("OperationCode");
					this.OnOperationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveID", DbType="Int")]
		public System.Nullable<int> ArchiveID
		{
			get
			{
				return this._ArchiveID;
			}
			set
			{
				if ((this._ArchiveID != value))
				{
					if (this._Archive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveID = value;
					this.SendPropertyChanged("ArchiveID");
					this.OnArchiveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress")]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_UserLog", Storage="_Archive", ThisKey="ArchiveID", OtherKey="ID", IsForeignKey=true)]
		public Archive Archive
		{
			get
			{
				return this._Archive.Entity;
			}
			set
			{
				Archive previousValue = this._Archive.Entity;
				if (((previousValue != value) 
							|| (this._Archive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Archive.Entity = null;
						previousValue.UserLogs.Remove(this);
					}
					this._Archive.Entity = value;
					if ((value != null))
					{
						value.UserLogs.Add(this);
						this._ArchiveID = value.ID;
					}
					else
					{
						this._ArchiveID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Archive");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLog", Storage="_User", ThisKey="UserCode", OtherKey="Code", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLogs.Add(this);
						this._UserCode = value.Code;
					}
					else
					{
						this._UserCode = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Locked;
		
		private EntitySet<UserRoleAccessPermission> _UserRoleAccessPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLockedChanging(bool value);
    partial void OnLockedChanged();
    #endregion
		
		public UserRole()
		{
			this._UserRoleAccessPermissions = new EntitySet<UserRoleAccessPermission>(new Action<UserRoleAccessPermission>(this.attach_UserRoleAccessPermissions), new Action<UserRoleAccessPermission>(this.detach_UserRoleAccessPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locked", DbType="Bit NOT NULL")]
		public bool Locked
		{
			get
			{
				return this._Locked;
			}
			set
			{
				if ((this._Locked != value))
				{
					this.OnLockedChanging(value);
					this.SendPropertyChanging();
					this._Locked = value;
					this.SendPropertyChanged("Locked");
					this.OnLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_UserRoleAccessPermission", Storage="_UserRoleAccessPermissions", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<UserRoleAccessPermission> UserRoleAccessPermissions
		{
			get
			{
				return this._UserRoleAccessPermissions;
			}
			set
			{
				this._UserRoleAccessPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoleAccessPermissions(UserRoleAccessPermission entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = this;
		}
		
		private void detach_UserRoleAccessPermissions(UserRoleAccessPermission entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoleAccessPermission")]
	public partial class UserRoleAccessPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ItemCode;
		
		private int _RoleID;
		
		private string _Allow;
		
		private EntityRef<UserRole> _UserRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnAllowChanging(string value);
    partial void OnAllowChanged();
    #endregion
		
		public UserRoleAccessPermission()
		{
			this._UserRole = default(EntityRef<UserRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._UserRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allow", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Allow
		{
			get
			{
				return this._Allow;
			}
			set
			{
				if ((this._Allow != value))
				{
					this.OnAllowChanging(value);
					this.SendPropertyChanging();
					this._Allow = value;
					this.SendPropertyChanged("Allow");
					this.OnAllowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_UserRoleAccessPermission", Storage="_UserRole", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
		public UserRole UserRole
		{
			get
			{
				return this._UserRole.Entity;
			}
			set
			{
				UserRole previousValue = this._UserRole.Entity;
				if (((previousValue != value) 
							|| (this._UserRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRole.Entity = null;
						previousValue.UserRoleAccessPermissions.Remove(this);
					}
					this._UserRole.Entity = value;
					if ((value != null))
					{
						value.UserRoleAccessPermissions.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("UserRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSetting")]
	public partial class UserSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserCode;
		
		private int _ArchiveDocumentsZoom;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserCodeChanging(int value);
    partial void OnUserCodeChanged();
    partial void OnArchiveDocumentsZoomChanging(int value);
    partial void OnArchiveDocumentsZoomChanged();
    #endregion
		
		public UserSetting()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserCode
		{
			get
			{
				return this._UserCode;
			}
			set
			{
				if ((this._UserCode != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCodeChanging(value);
					this.SendPropertyChanging();
					this._UserCode = value;
					this.SendPropertyChanged("UserCode");
					this.OnUserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveDocumentsZoom", DbType="Int NOT NULL")]
		public int ArchiveDocumentsZoom
		{
			get
			{
				return this._ArchiveDocumentsZoom;
			}
			set
			{
				if ((this._ArchiveDocumentsZoom != value))
				{
					this.OnArchiveDocumentsZoomChanging(value);
					this.SendPropertyChanging();
					this._ArchiveDocumentsZoom = value;
					this.SendPropertyChanged("ArchiveDocumentsZoom");
					this.OnArchiveDocumentsZoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSetting", Storage="_User", ThisKey="UserCode", OtherKey="Code", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserSetting = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserSetting = this;
						this._UserCode = value.Code;
					}
					else
					{
						this._UserCode = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class DocumentsFailure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArchiveID;
		
		private string _PerssonelNumber;
		
		private int _documentID;
		
		private int _Title;
		
		private string _Description;
		
		private int _UserSender;
		
		private System.Nullable<int> _Userchecker;
		
		private bool _isRead;
		
		private System.DateTime _DateSender;
		
		private System.Nullable<System.DateTime> _DateChecker;
		
		private string _DocumnetNumber;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<Archive> _Archive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArchiveIDChanging(int value);
    partial void OnArchiveIDChanged();
    partial void OnPerssonelNumberChanging(string value);
    partial void OnPerssonelNumberChanged();
    partial void OndocumentIDChanging(int value);
    partial void OndocumentIDChanged();
    partial void OnTitleChanging(int value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserSenderChanging(int value);
    partial void OnUserSenderChanged();
    partial void OnUsercheckerChanging(System.Nullable<int> value);
    partial void OnUsercheckerChanged();
    partial void OnisReadChanging(bool value);
    partial void OnisReadChanged();
    partial void OnDateSenderChanging(System.DateTime value);
    partial void OnDateSenderChanged();
    partial void OnDateCheckerChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCheckerChanged();
    partial void OnDocumnetNumberChanging(string value);
    partial void OnDocumnetNumberChanged();
    #endregion
		
		public DocumentsFailure()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._Archive = default(EntityRef<Archive>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveID", DbType="Int NOT NULL")]
		public int ArchiveID
		{
			get
			{
				return this._ArchiveID;
			}
			set
			{
				if ((this._ArchiveID != value))
				{
					if (this._Archive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveID = value;
					this.SendPropertyChanged("ArchiveID");
					this.OnArchiveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerssonelNumber", CanBeNull=false)]
		public string PerssonelNumber
		{
			get
			{
				return this._PerssonelNumber;
			}
			set
			{
				if ((this._PerssonelNumber != value))
				{
					this.OnPerssonelNumberChanging(value);
					this.SendPropertyChanging();
					this._PerssonelNumber = value;
					this.SendPropertyChanged("PerssonelNumber");
					this.OnPerssonelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentID")]
		public int documentID
		{
			get
			{
				return this._documentID;
			}
			set
			{
				if ((this._documentID != value))
				{
					this.OndocumentIDChanging(value);
					this.SendPropertyChanging();
					this._documentID = value;
					this.SendPropertyChanged("documentID");
					this.OndocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title")]
		public int Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserSender")]
		public int UserSender
		{
			get
			{
				return this._UserSender;
			}
			set
			{
				if ((this._UserSender != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserSenderChanging(value);
					this.SendPropertyChanging();
					this._UserSender = value;
					this.SendPropertyChanged("UserSender");
					this.OnUserSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Userchecker")]
		public System.Nullable<int> Userchecker
		{
			get
			{
				return this._Userchecker;
			}
			set
			{
				if ((this._Userchecker != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsercheckerChanging(value);
					this.SendPropertyChanging();
					this._Userchecker = value;
					this.SendPropertyChanged("Userchecker");
					this.OnUsercheckerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isRead")]
		public bool isRead
		{
			get
			{
				return this._isRead;
			}
			set
			{
				if ((this._isRead != value))
				{
					this.OnisReadChanging(value);
					this.SendPropertyChanging();
					this._isRead = value;
					this.SendPropertyChanged("isRead");
					this.OnisReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSender")]
		public System.DateTime DateSender
		{
			get
			{
				return this._DateSender;
			}
			set
			{
				if ((this._DateSender != value))
				{
					this.OnDateSenderChanging(value);
					this.SendPropertyChanging();
					this._DateSender = value;
					this.SendPropertyChanged("DateSender");
					this.OnDateSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChecker")]
		public System.Nullable<System.DateTime> DateChecker
		{
			get
			{
				return this._DateChecker;
			}
			set
			{
				if ((this._DateChecker != value))
				{
					this.OnDateCheckerChanging(value);
					this.SendPropertyChanging();
					this._DateChecker = value;
					this.SendPropertyChanged("DateChecker");
					this.OnDateCheckerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumnetNumber", CanBeNull=false)]
		public string DocumnetNumber
		{
			get
			{
				return this._DocumnetNumber;
			}
			set
			{
				if ((this._DocumnetNumber != value))
				{
					this.OnDocumnetNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumnetNumber = value;
					this.SendPropertyChanged("DocumnetNumber");
					this.OnDocumnetNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DocumentsFailure", Storage="_User", ThisKey="UserSender", OtherKey="Code", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DocumentsFailures.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DocumentsFailures.Add(this);
						this._UserSender = value.Code;
					}
					else
					{
						this._UserSender = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DocumentsFailure1", Storage="_User1", ThisKey="Userchecker", OtherKey="Code", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.DocumentsFailures1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.DocumentsFailures1.Add(this);
						this._Userchecker = value.Code;
					}
					else
					{
						this._Userchecker = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_DocumentsFailure", Storage="_Archive", ThisKey="ArchiveID", OtherKey="ID", IsForeignKey=true)]
		public Archive Archive
		{
			get
			{
				return this._Archive.Entity;
			}
			set
			{
				Archive previousValue = this._Archive.Entity;
				if (((previousValue != value) 
							|| (this._Archive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Archive.Entity = null;
						previousValue.DocumentsFailures.Remove(this);
					}
					this._Archive.Entity = value;
					if ((value != null))
					{
						value.DocumentsFailures.Add(this);
						this._ArchiveID = value.ID;
					}
					else
					{
						this._ArchiveID = default(int);
					}
					this.SendPropertyChanged("Archive");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class PermissionSecurity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PK_Archive;
		
		private int _PK_User;
		
		private int _PK_SecurityORField18;
		
		private EntityRef<Archive> _Archive;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPK_ArchiveChanging(int value);
    partial void OnPK_ArchiveChanged();
    partial void OnPK_UserChanging(int value);
    partial void OnPK_UserChanged();
    partial void OnPK_SecurityORField18Changing(int value);
    partial void OnPK_SecurityORField18Changed();
    #endregion
		
		public PermissionSecurity()
		{
			this._Archive = default(EntityRef<Archive>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK_Archive")]
		public int PK_Archive
		{
			get
			{
				return this._PK_Archive;
			}
			set
			{
				if ((this._PK_Archive != value))
				{
					if (this._Archive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPK_ArchiveChanging(value);
					this.SendPropertyChanging();
					this._PK_Archive = value;
					this.SendPropertyChanged("PK_Archive");
					this.OnPK_ArchiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK_User")]
		public int PK_User
		{
			get
			{
				return this._PK_User;
			}
			set
			{
				if ((this._PK_User != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPK_UserChanging(value);
					this.SendPropertyChanging();
					this._PK_User = value;
					this.SendPropertyChanged("PK_User");
					this.OnPK_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK_SecurityORField18")]
		public int PK_SecurityORField18
		{
			get
			{
				return this._PK_SecurityORField18;
			}
			set
			{
				if ((this._PK_SecurityORField18 != value))
				{
					this.OnPK_SecurityORField18Changing(value);
					this.SendPropertyChanging();
					this._PK_SecurityORField18 = value;
					this.SendPropertyChanged("PK_SecurityORField18");
					this.OnPK_SecurityORField18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_PermissionSecurity", Storage="_Archive", ThisKey="PK_Archive", OtherKey="ID", IsForeignKey=true)]
		public Archive Archive
		{
			get
			{
				return this._Archive.Entity;
			}
			set
			{
				Archive previousValue = this._Archive.Entity;
				if (((previousValue != value) 
							|| (this._Archive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Archive.Entity = null;
						previousValue.PermissionSecurities.Remove(this);
					}
					this._Archive.Entity = value;
					if ((value != null))
					{
						value.PermissionSecurities.Add(this);
						this._PK_Archive = value.ID;
					}
					else
					{
						this._PK_Archive = default(int);
					}
					this.SendPropertyChanged("Archive");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PermissionSecurity", Storage="_User", ThisKey="PK_User", OtherKey="Code", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PermissionSecurities.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PermissionSecurities.Add(this);
						this._PK_User = value.Code;
					}
					else
					{
						this._PK_User = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class PermissionTitle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PK_User;
		
		private int _PK_Archive;
		
		private int _PK_TitleORField11;
		
		private EntityRef<User> _User;
		
		private EntityRef<Archive> _Archive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPK_UserChanging(int value);
    partial void OnPK_UserChanged();
    partial void OnPK_ArchiveChanging(int value);
    partial void OnPK_ArchiveChanged();
    partial void OnPK_TitleORField11Changing(int value);
    partial void OnPK_TitleORField11Changed();
    #endregion
		
		public PermissionTitle()
		{
			this._User = default(EntityRef<User>);
			this._Archive = default(EntityRef<Archive>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK_User")]
		public int PK_User
		{
			get
			{
				return this._PK_User;
			}
			set
			{
				if ((this._PK_User != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPK_UserChanging(value);
					this.SendPropertyChanging();
					this._PK_User = value;
					this.SendPropertyChanged("PK_User");
					this.OnPK_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK_Archive")]
		public int PK_Archive
		{
			get
			{
				return this._PK_Archive;
			}
			set
			{
				if ((this._PK_Archive != value))
				{
					if (this._Archive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPK_ArchiveChanging(value);
					this.SendPropertyChanging();
					this._PK_Archive = value;
					this.SendPropertyChanged("PK_Archive");
					this.OnPK_ArchiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK_TitleORField11")]
		public int PK_TitleORField11
		{
			get
			{
				return this._PK_TitleORField11;
			}
			set
			{
				if ((this._PK_TitleORField11 != value))
				{
					this.OnPK_TitleORField11Changing(value);
					this.SendPropertyChanging();
					this._PK_TitleORField11 = value;
					this.SendPropertyChanged("PK_TitleORField11");
					this.OnPK_TitleORField11Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PermissionTitle", Storage="_User", ThisKey="PK_User", OtherKey="Code", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PermissionTitles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PermissionTitles.Add(this);
						this._PK_User = value.Code;
					}
					else
					{
						this._PK_User = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_PermissionTitle", Storage="_Archive", ThisKey="PK_Archive", OtherKey="ID", IsForeignKey=true)]
		public Archive Archive
		{
			get
			{
				return this._Archive.Entity;
			}
			set
			{
				Archive previousValue = this._Archive.Entity;
				if (((previousValue != value) 
							|| (this._Archive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Archive.Entity = null;
						previousValue.PermissionTitles.Remove(this);
					}
					this._Archive.Entity = value;
					if ((value != null))
					{
						value.PermissionTitles.Add(this);
						this._PK_Archive = value.ID;
					}
					else
					{
						this._PK_Archive = default(int);
					}
					this.SendPropertyChanged("Archive");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class PermissionDossier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PK_User;
		
		private int _PK_Archive;
		
		private int _DossierType;
		
		private EntityRef<User> _User;
		
		private EntityRef<Archive> _Archive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPK_UserChanging(int value);
    partial void OnPK_UserChanged();
    partial void OnPK_ArchiveChanging(int value);
    partial void OnPK_ArchiveChanged();
    partial void OnDossierTypeChanging(int value);
    partial void OnDossierTypeChanged();
    #endregion
		
		public PermissionDossier()
		{
			this._User = default(EntityRef<User>);
			this._Archive = default(EntityRef<Archive>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK_User")]
		public int PK_User
		{
			get
			{
				return this._PK_User;
			}
			set
			{
				if ((this._PK_User != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPK_UserChanging(value);
					this.SendPropertyChanging();
					this._PK_User = value;
					this.SendPropertyChanged("PK_User");
					this.OnPK_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK_Archive")]
		public int PK_Archive
		{
			get
			{
				return this._PK_Archive;
			}
			set
			{
				if ((this._PK_Archive != value))
				{
					if (this._Archive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPK_ArchiveChanging(value);
					this.SendPropertyChanging();
					this._PK_Archive = value;
					this.SendPropertyChanged("PK_Archive");
					this.OnPK_ArchiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DossierType")]
		public int DossierType
		{
			get
			{
				return this._DossierType;
			}
			set
			{
				if ((this._DossierType != value))
				{
					this.OnDossierTypeChanging(value);
					this.SendPropertyChanging();
					this._DossierType = value;
					this.SendPropertyChanged("DossierType");
					this.OnDossierTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PermissionDossier", Storage="_User", ThisKey="PK_User", OtherKey="Code", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PermissionDossiers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PermissionDossiers.Add(this);
						this._PK_User = value.Code;
					}
					else
					{
						this._PK_User = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archive_PermissionDossier", Storage="_Archive", ThisKey="PK_Archive", OtherKey="ID", IsForeignKey=true)]
		public Archive Archive
		{
			get
			{
				return this._Archive.Entity;
			}
			set
			{
				Archive previousValue = this._Archive.Entity;
				if (((previousValue != value) 
							|| (this._Archive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Archive.Entity = null;
						previousValue.PermissionDossiers.Remove(this);
					}
					this._Archive.Entity = value;
					if ((value != null))
					{
						value.PermissionDossiers.Add(this);
						this._PK_Archive = value.ID;
					}
					else
					{
						this._PK_Archive = default(int);
					}
					this.SendPropertyChanged("Archive");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
