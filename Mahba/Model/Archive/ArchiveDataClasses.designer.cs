#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NjitSoftware.Model.Archive
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Archive")]
	public partial class ArchiveDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertAddressType(AddressType instance);
    partial void UpdateAddressType(AddressType instance);
    partial void DeleteAddressType(AddressType instance);
    partial void InsertAllowedExtension(AllowedExtension instance);
    partial void UpdateAllowedExtension(AllowedExtension instance);
    partial void DeleteAllowedExtension(AllowedExtension instance);
    partial void InsertArchiveField(ArchiveField instance);
    partial void UpdateArchiveField(ArchiveField instance);
    partial void DeleteArchiveField(ArchiveField instance);
    partial void InsertArchiveSetting(ArchiveSetting instance);
    partial void UpdateArchiveSetting(ArchiveSetting instance);
    partial void DeleteArchiveSetting(ArchiveSetting instance);
    partial void InsertArchiveSubGroupField(ArchiveSubGroupField instance);
    partial void UpdateArchiveSubGroupField(ArchiveSubGroupField instance);
    partial void DeleteArchiveSubGroupField(ArchiveSubGroupField instance);
    partial void InsertArchiveTab(ArchiveTab instance);
    partial void UpdateArchiveTab(ArchiveTab instance);
    partial void DeleteArchiveTab(ArchiveTab instance);
    partial void InsertArchiveTabType(ArchiveTabType instance);
    partial void UpdateArchiveTabType(ArchiveTabType instance);
    partial void DeleteArchiveTabType(ArchiveTabType instance);
    partial void InsertBoxType(BoxType instance);
    partial void UpdateBoxType(BoxType instance);
    partial void DeleteBoxType(BoxType instance);
    partial void InsertCallType(CallType instance);
    partial void UpdateCallType(CallType instance);
    partial void DeleteCallType(CallType instance);
    partial void InsertCompressionType(CompressionType instance);
    partial void UpdateCompressionType(CompressionType instance);
    partial void DeleteCompressionType(CompressionType instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertCounterFieldSetting(CounterFieldSetting instance);
    partial void UpdateCounterFieldSetting(CounterFieldSetting instance);
    partial void DeleteCounterFieldSetting(CounterFieldSetting instance);
    partial void InsertDatabaseVersion(DatabaseVersion instance);
    partial void UpdateDatabaseVersion(DatabaseVersion instance);
    partial void DeleteDatabaseVersion(DatabaseVersion instance);
    partial void InsertDisplayField(DisplayField instance);
    partial void UpdateDisplayField(DisplayField instance);
    partial void DeleteDisplayField(DisplayField instance);
    partial void InsertDisplayFieldCode(DisplayFieldCode instance);
    partial void UpdateDisplayFieldCode(DisplayFieldCode instance);
    partial void DeleteDisplayFieldCode(DisplayFieldCode instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertDocumentSaveLocation(DocumentSaveLocation instance);
    partial void UpdateDocumentSaveLocation(DocumentSaveLocation instance);
    partial void DeleteDocumentSaveLocation(DocumentSaveLocation instance);
    partial void InsertDossier(Dossier instance);
    partial void UpdateDossier(Dossier instance);
    partial void DeleteDossier(Dossier instance);
    partial void InsertDossier1(Dossier1 instance);
    partial void UpdateDossier1(Dossier1 instance);
    partial void DeleteDossier1(Dossier1 instance);
    partial void InsertDossierType(DossierType instance);
    partial void UpdateDossierType(DossierType instance);
    partial void DeleteDossierType(DossierType instance);
    partial void InsertField_1_3(Field_1_3 instance);
    partial void UpdateField_1_3(Field_1_3 instance);
    partial void DeleteField_1_3(Field_1_3 instance);
    partial void InsertFieldStatus(FieldStatus instance);
    partial void UpdateFieldStatus(FieldStatus instance);
    partial void DeleteFieldStatus(FieldStatus instance);
    partial void InsertFieldType(FieldType instance);
    partial void UpdateFieldType(FieldType instance);
    partial void DeleteFieldType(FieldType instance);
    partial void InsertImageFormat(ImageFormat instance);
    partial void UpdateImageFormat(ImageFormat instance);
    partial void DeleteImageFormat(ImageFormat instance);
    partial void InsertInfo(Info instance);
    partial void UpdateInfo(Info instance);
    partial void DeleteInfo(Info instance);
    partial void InsertLegalPerson(LegalPerson instance);
    partial void UpdateLegalPerson(LegalPerson instance);
    partial void DeleteLegalPerson(LegalPerson instance);
    partial void InsertLending(Lending instance);
    partial void UpdateLending(Lending instance);
    partial void DeleteLending(Lending instance);
    partial void InsertLendingIntention(LendingIntention instance);
    partial void UpdateLendingIntention(LendingIntention instance);
    partial void DeleteLendingIntention(LendingIntention instance);
    partial void InsertMetropolitanArea(MetropolitanArea instance);
    partial void UpdateMetropolitanArea(MetropolitanArea instance);
    partial void DeleteMetropolitanArea(MetropolitanArea instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertReportDetail(ReportDetail instance);
    partial void UpdateReportDetail(ReportDetail instance);
    partial void DeleteReportDetail(ReportDetail instance);
    partial void InsertRightfulPerson(RightfulPerson instance);
    partial void UpdateRightfulPerson(RightfulPerson instance);
    partial void DeleteRightfulPerson(RightfulPerson instance);
    #endregion
		
		public ArchiveDataClassesDataContext() : 
				base(global::NjitSoftware.Properties.Settings.Default.ArchiveConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ArchiveDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArchiveDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArchiveDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArchiveDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RightfulPersonView> RightfulPersonViews
		{
			get
			{
				return this.GetTable<RightfulPersonView>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get
			{
				return this.GetTable<AddressType>();
			}
		}
		
		public System.Data.Linq.Table<AllowedExtension> AllowedExtensions
		{
			get
			{
				return this.GetTable<AllowedExtension>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveField> ArchiveFields
		{
			get
			{
				return this.GetTable<ArchiveField>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveSetting> ArchiveSettings
		{
			get
			{
				return this.GetTable<ArchiveSetting>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveSubGroupField> ArchiveSubGroupFields
		{
			get
			{
				return this.GetTable<ArchiveSubGroupField>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveTab> ArchiveTabs
		{
			get
			{
				return this.GetTable<ArchiveTab>();
			}
		}
		
		public System.Data.Linq.Table<ArchiveTabType> ArchiveTabTypes
		{
			get
			{
				return this.GetTable<ArchiveTabType>();
			}
		}
		
		public System.Data.Linq.Table<BoxType> BoxTypes
		{
			get
			{
				return this.GetTable<BoxType>();
			}
		}
		
		public System.Data.Linq.Table<CallType> CallTypes
		{
			get
			{
				return this.GetTable<CallType>();
			}
		}
		
		public System.Data.Linq.Table<CompressionType> CompressionTypes
		{
			get
			{
				return this.GetTable<CompressionType>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<CounterFieldSetting> CounterFieldSettings
		{
			get
			{
				return this.GetTable<CounterFieldSetting>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseVersion> DatabaseVersions
		{
			get
			{
				return this.GetTable<DatabaseVersion>();
			}
		}
		
		public System.Data.Linq.Table<DisplayField> DisplayFields
		{
			get
			{
				return this.GetTable<DisplayField>();
			}
		}
		
		public System.Data.Linq.Table<DisplayFieldCode> DisplayFieldCodes
		{
			get
			{
				return this.GetTable<DisplayFieldCode>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<DocumentSaveLocation> DocumentSaveLocations
		{
			get
			{
				return this.GetTable<DocumentSaveLocation>();
			}
		}
		
		public System.Data.Linq.Table<Dossier> Dossiers
		{
			get
			{
				return this.GetTable<Dossier>();
			}
		}
		
		public System.Data.Linq.Table<Dossier1> Dossier1s
		{
			get
			{
				return this.GetTable<Dossier1>();
			}
		}
		
		public System.Data.Linq.Table<DossierType> DossierTypes
		{
			get
			{
				return this.GetTable<DossierType>();
			}
		}
		
		public System.Data.Linq.Table<Field_1_3> Field_1_3s
		{
			get
			{
				return this.GetTable<Field_1_3>();
			}
		}
		
		public System.Data.Linq.Table<FieldStatus> FieldStatus
		{
			get
			{
				return this.GetTable<FieldStatus>();
			}
		}
		
		public System.Data.Linq.Table<FieldType> FieldTypes
		{
			get
			{
				return this.GetTable<FieldType>();
			}
		}
		
		public System.Data.Linq.Table<ImageFormat> ImageFormats
		{
			get
			{
				return this.GetTable<ImageFormat>();
			}
		}
		
		public System.Data.Linq.Table<Info> Infos
		{
			get
			{
				return this.GetTable<Info>();
			}
		}
		
		public System.Data.Linq.Table<LegalPerson> LegalPersons
		{
			get
			{
				return this.GetTable<LegalPerson>();
			}
		}
		
		public System.Data.Linq.Table<Lending> Lendings
		{
			get
			{
				return this.GetTable<Lending>();
			}
		}
		
		public System.Data.Linq.Table<LendingIntention> LendingIntentions
		{
			get
			{
				return this.GetTable<LendingIntention>();
			}
		}
		
		public System.Data.Linq.Table<MetropolitanArea> MetropolitanAreas
		{
			get
			{
				return this.GetTable<MetropolitanArea>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Province> Provinces
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<ReportDetail> ReportDetails
		{
			get
			{
				return this.GetTable<ReportDetail>();
			}
		}
		
		public System.Data.Linq.Table<RightfulPerson> RightfulPersons
		{
			get
			{
				return this.GetTable<RightfulPerson>();
			}
		}
		
		public System.Data.Linq.Table<AddressView> AddressViews
		{
			get
			{
				return this.GetTable<AddressView>();
			}
		}
		
		public System.Data.Linq.Table<ContactView> ContactViews
		{
			get
			{
				return this.GetTable<ContactView>();
			}
		}
		
		public System.Data.Linq.Table<DisplayFieldView> DisplayFieldViews
		{
			get
			{
				return this.GetTable<DisplayFieldView>();
			}
		}
		
		public System.Data.Linq.Table<LegalPersonView> LegalPersonViews
		{
			get
			{
				return this.GetTable<LegalPersonView>();
			}
		}
		
		public System.Data.Linq.Table<LendingView> LendingViews
		{
			get
			{
				return this.GetTable<LendingView>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Sp_CrateBackup")]
		public int Sp_CrateBackup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DatabaseName", DbType="NVarChar(MAX)")] string databaseName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BackupPathDatabase", DbType="NVarChar(MAX)")] string backupPathDatabase)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), databaseName, backupPathDatabase);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RightfulPersonView")]
	public partial class RightfulPersonView
	{
		
		private int _Id;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Fullname;
		
		private string _Fathername;
		
		private string _NationalCode;
		
		private string _IdentityNumber;
		
		private string _Birthdate;
		
		private string _Address;
		
		private string _Tel;
		
		private string _Mobile;
		
		private string _WorkAddress;
		
		private string _BackAccount;
		
		public RightfulPersonView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this._Firstname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this._Lastname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(101) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this._Fullname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fathername", DbType="NVarChar(50)")]
		public string Fathername
		{
			get
			{
				return this._Fathername;
			}
			set
			{
				if ((this._Fathername != value))
				{
					this._Fathername = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalCode", DbType="NVarChar(50)")]
		public string NationalCode
		{
			get
			{
				return this._NationalCode;
			}
			set
			{
				if ((this._NationalCode != value))
				{
					this._NationalCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentityNumber", DbType="NVarChar(50)")]
		public string IdentityNumber
		{
			get
			{
				return this._IdentityNumber;
			}
			set
			{
				if ((this._IdentityNumber != value))
				{
					this._IdentityNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="NVarChar(50)")]
		public string Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this._Birthdate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(50)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this._Tel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(50)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this._Mobile = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkAddress", DbType="NVarChar(250)")]
		public string WorkAddress
		{
			get
			{
				return this._WorkAddress;
			}
			set
			{
				if ((this._WorkAddress != value))
				{
					this._WorkAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackAccount", DbType="NVarChar(50)")]
		public string BackAccount
		{
			get
			{
				return this._BackAccount;
			}
			set
			{
				if ((this._BackAccount != value))
				{
					this._BackAccount = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _PersonnelNumber;
		
		private int _AddressTypeID;
		
		private int _ProvinceID;
		
		private string _Township;
		
		private int _MetropolitanAreaID;
		
		private string _Street;
		
		private string _Alley;
		
		private string _PostalCode;
		
		private EntityRef<AddressType> _AddressType;
		
		private EntityRef<Dossier> _Dossier;
		
		private EntityRef<MetropolitanArea> _MetropolitanArea;
		
		private EntityRef<Province> _Province;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnPersonnelNumberChanging(string value);
    partial void OnPersonnelNumberChanged();
    partial void OnAddressTypeIDChanging(int value);
    partial void OnAddressTypeIDChanged();
    partial void OnProvinceIDChanging(int value);
    partial void OnProvinceIDChanged();
    partial void OnTownshipChanging(string value);
    partial void OnTownshipChanged();
    partial void OnMetropolitanAreaIDChanging(int value);
    partial void OnMetropolitanAreaIDChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnAlleyChanging(string value);
    partial void OnAlleyChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    #endregion
		
		public Address()
		{
			this._AddressType = default(EntityRef<AddressType>);
			this._Dossier = default(EntityRef<Dossier>);
			this._MetropolitanArea = default(EntityRef<MetropolitanArea>);
			this._Province = default(EntityRef<Province>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					if (this._Dossier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonnelNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber = value;
					this.SendPropertyChanged("PersonnelNumber");
					this.OnPersonnelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressTypeID", DbType="Int NOT NULL")]
		public int AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					if (this._AddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int NOT NULL")]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Township", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Township
		{
			get
			{
				return this._Township;
			}
			set
			{
				if ((this._Township != value))
				{
					this.OnTownshipChanging(value);
					this.SendPropertyChanging();
					this._Township = value;
					this.SendPropertyChanged("Township");
					this.OnTownshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetropolitanAreaID", DbType="Int NOT NULL")]
		public int MetropolitanAreaID
		{
			get
			{
				return this._MetropolitanAreaID;
			}
			set
			{
				if ((this._MetropolitanAreaID != value))
				{
					if (this._MetropolitanArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetropolitanAreaIDChanging(value);
					this.SendPropertyChanging();
					this._MetropolitanAreaID = value;
					this.SendPropertyChanged("MetropolitanAreaID");
					this.OnMetropolitanAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alley", DbType="NVarChar(50)")]
		public string Alley
		{
			get
			{
				return this._Alley;
			}
			set
			{
				if ((this._Alley != value))
				{
					this.OnAlleyChanging(value);
					this.SendPropertyChanging();
					this._Alley = value;
					this.SendPropertyChanged("Alley");
					this.OnAlleyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(50)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressType_Address", Storage="_AddressType", ThisKey="AddressTypeID", OtherKey="ID", IsForeignKey=true)]
		public AddressType AddressType
		{
			get
			{
				return this._AddressType.Entity;
			}
			set
			{
				AddressType previousValue = this._AddressType.Entity;
				if (((previousValue != value) 
							|| (this._AddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressType.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._AddressType.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._AddressTypeID = value.ID;
					}
					else
					{
						this._AddressTypeID = default(int);
					}
					this.SendPropertyChanged("AddressType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Address", Storage="_Dossier", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dossier Dossier
		{
			get
			{
				return this._Dossier.Entity;
			}
			set
			{
				Dossier previousValue = this._Dossier.Entity;
				if (((previousValue != value) 
							|| (this._Dossier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dossier.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Dossier.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._PersonnelNumber = value.PersonnelNumber;
					}
					else
					{
						this._PersonnelNumber = default(string);
					}
					this.SendPropertyChanged("Dossier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetropolitanArea_Address", Storage="_MetropolitanArea", ThisKey="MetropolitanAreaID", OtherKey="ID", IsForeignKey=true)]
		public MetropolitanArea MetropolitanArea
		{
			get
			{
				return this._MetropolitanArea.Entity;
			}
			set
			{
				MetropolitanArea previousValue = this._MetropolitanArea.Entity;
				if (((previousValue != value) 
							|| (this._MetropolitanArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetropolitanArea.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._MetropolitanArea.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._MetropolitanAreaID = value.ID;
					}
					else
					{
						this._MetropolitanAreaID = default(int);
					}
					this.SendPropertyChanged("MetropolitanArea");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Address", Storage="_Province", ThisKey="ProvinceID", OtherKey="ID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._ProvinceID = value.ID;
					}
					else
					{
						this._ProvinceID = default(int);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressType")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public AddressType()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressType_Address", Storage="_Addresses", ThisKey="ID", OtherKey="AddressTypeID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AllowedExtension")]
	public partial class AllowedExtension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Extension;
		
		private bool _IsImage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    partial void OnIsImageChanging(bool value);
    partial void OnIsImageChanged();
    #endregion
		
		public AllowedExtension()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Extension", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsImage", DbType="Bit NOT NULL")]
		public bool IsImage
		{
			get
			{
				return this._IsImage;
			}
			set
			{
				if ((this._IsImage != value))
				{
					this.OnIsImageChanging(value);
					this.SendPropertyChanging();
					this._IsImage = value;
					this.SendPropertyChanged("IsImage");
					this.OnIsImageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveField")]
	public partial class ArchiveField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArchiveTabID;
		
		private string _Label;
		
		private string _FieldName;
		
		private int _FieldTypeCode;
		
		private int _StatusCode;
		
		private int _BoxTypeCode;
		
		private bool _AutoComplete;
		
		private System.Nullable<int> _MinLength;
		
		private System.Nullable<int> _MaxLength;
		
		private System.Nullable<double> _MinValue;
		
		private System.Nullable<double> _MaxValue;
		
		private string _DefaultValue;
		
		private System.Nullable<int> _IDParent;
		
		private int _Index;
		
		private EntitySet<ArchiveSubGroupField> _ArchiveSubGroupFields;
		
		private EntitySet<CounterFieldSetting> _CounterFieldSettings;
		
		private EntitySet<DisplayField> _DisplayFields;
		
		private EntitySet<ReportDetail> _ReportDetails;
		
		private EntityRef<ArchiveTab> _ArchiveTab;
		
		private EntityRef<BoxType> _BoxType;
		
		private EntityRef<FieldStatus> _FieldStatus;
		
		private EntityRef<FieldType> _FieldType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArchiveTabIDChanging(int value);
    partial void OnArchiveTabIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnFieldTypeCodeChanging(int value);
    partial void OnFieldTypeCodeChanged();
    partial void OnStatusCodeChanging(int value);
    partial void OnStatusCodeChanged();
    partial void OnBoxTypeCodeChanging(int value);
    partial void OnBoxTypeCodeChanged();
    partial void OnAutoCompleteChanging(bool value);
    partial void OnAutoCompleteChanged();
    partial void OnMinLengthChanging(System.Nullable<int> value);
    partial void OnMinLengthChanged();
    partial void OnMaxLengthChanging(System.Nullable<int> value);
    partial void OnMaxLengthChanged();
    partial void OnMinValueChanging(System.Nullable<double> value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(System.Nullable<double> value);
    partial void OnMaxValueChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnIDParentChanging(System.Nullable<int> value);
    partial void OnIDParentChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    #endregion
		
		public ArchiveField()
		{
			this._ArchiveSubGroupFields = new EntitySet<ArchiveSubGroupField>(new Action<ArchiveSubGroupField>(this.attach_ArchiveSubGroupFields), new Action<ArchiveSubGroupField>(this.detach_ArchiveSubGroupFields));
			this._CounterFieldSettings = new EntitySet<CounterFieldSetting>(new Action<CounterFieldSetting>(this.attach_CounterFieldSettings), new Action<CounterFieldSetting>(this.detach_CounterFieldSettings));
			this._DisplayFields = new EntitySet<DisplayField>(new Action<DisplayField>(this.attach_DisplayFields), new Action<DisplayField>(this.detach_DisplayFields));
			this._ReportDetails = new EntitySet<ReportDetail>(new Action<ReportDetail>(this.attach_ReportDetails), new Action<ReportDetail>(this.detach_ReportDetails));
			this._ArchiveTab = default(EntityRef<ArchiveTab>);
			this._BoxType = default(EntityRef<BoxType>);
			this._FieldStatus = default(EntityRef<FieldStatus>);
			this._FieldType = default(EntityRef<FieldType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveTabID", DbType="Int NOT NULL")]
		public int ArchiveTabID
		{
			get
			{
				return this._ArchiveTabID;
			}
			set
			{
				if ((this._ArchiveTabID != value))
				{
					if (this._ArchiveTab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveTabIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveTabID = value;
					this.SendPropertyChanged("ArchiveTabID");
					this.OnArchiveTabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(MAX)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldTypeCode", DbType="Int NOT NULL")]
		public int FieldTypeCode
		{
			get
			{
				return this._FieldTypeCode;
			}
			set
			{
				if ((this._FieldTypeCode != value))
				{
					if (this._FieldType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._FieldTypeCode = value;
					this.SendPropertyChanged("FieldTypeCode");
					this.OnFieldTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusCode", DbType="Int NOT NULL")]
		public int StatusCode
		{
			get
			{
				return this._StatusCode;
			}
			set
			{
				if ((this._StatusCode != value))
				{
					if (this._FieldStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._StatusCode = value;
					this.SendPropertyChanged("StatusCode");
					this.OnStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxTypeCode", DbType="Int NOT NULL")]
		public int BoxTypeCode
		{
			get
			{
				return this._BoxTypeCode;
			}
			set
			{
				if ((this._BoxTypeCode != value))
				{
					if (this._BoxType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoxTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._BoxTypeCode = value;
					this.SendPropertyChanged("BoxTypeCode");
					this.OnBoxTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoComplete", DbType="Bit NOT NULL")]
		public bool AutoComplete
		{
			get
			{
				return this._AutoComplete;
			}
			set
			{
				if ((this._AutoComplete != value))
				{
					this.OnAutoCompleteChanging(value);
					this.SendPropertyChanging();
					this._AutoComplete = value;
					this.SendPropertyChanged("AutoComplete");
					this.OnAutoCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinLength", DbType="Int")]
		public System.Nullable<int> MinLength
		{
			get
			{
				return this._MinLength;
			}
			set
			{
				if ((this._MinLength != value))
				{
					this.OnMinLengthChanging(value);
					this.SendPropertyChanging();
					this._MinLength = value;
					this.SendPropertyChanged("MinLength");
					this.OnMinLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxLength", DbType="Int")]
		public System.Nullable<int> MaxLength
		{
			get
			{
				return this._MaxLength;
			}
			set
			{
				if ((this._MaxLength != value))
				{
					this.OnMaxLengthChanging(value);
					this.SendPropertyChanging();
					this._MaxLength = value;
					this.SendPropertyChanged("MaxLength");
					this.OnMaxLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="Float")]
		public System.Nullable<double> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Float")]
		public System.Nullable<double> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="NVarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDParent", DbType="Int")]
		public System.Nullable<int> IDParent
		{
			get
			{
				return this._IDParent;
			}
			set
			{
				if ((this._IDParent != value))
				{
					this.OnIDParentChanging(value);
					this.SendPropertyChanging();
					this._IDParent = value;
					this.SendPropertyChanged("IDParent");
					this.OnIDParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveField_ArchiveSubGroupField", Storage="_ArchiveSubGroupFields", ThisKey="ID", OtherKey="ArchiveFieldID")]
		public EntitySet<ArchiveSubGroupField> ArchiveSubGroupFields
		{
			get
			{
				return this._ArchiveSubGroupFields;
			}
			set
			{
				this._ArchiveSubGroupFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveField_CounterFieldSetting", Storage="_CounterFieldSettings", ThisKey="ID", OtherKey="ArchiveFieldID")]
		public EntitySet<CounterFieldSetting> CounterFieldSettings
		{
			get
			{
				return this._CounterFieldSettings;
			}
			set
			{
				this._CounterFieldSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveField_DisplayField", Storage="_DisplayFields", ThisKey="ID", OtherKey="ArchiveFieldID")]
		public EntitySet<DisplayField> DisplayFields
		{
			get
			{
				return this._DisplayFields;
			}
			set
			{
				this._DisplayFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveField_ReportDetail", Storage="_ReportDetails", ThisKey="ID", OtherKey="ArchiveFieldID")]
		public EntitySet<ReportDetail> ReportDetails
		{
			get
			{
				return this._ReportDetails;
			}
			set
			{
				this._ReportDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveTab_ArchiveField", Storage="_ArchiveTab", ThisKey="ArchiveTabID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ArchiveTab ArchiveTab
		{
			get
			{
				return this._ArchiveTab.Entity;
			}
			set
			{
				ArchiveTab previousValue = this._ArchiveTab.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveTab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveTab.Entity = null;
						previousValue.ArchiveFields.Remove(this);
					}
					this._ArchiveTab.Entity = value;
					if ((value != null))
					{
						value.ArchiveFields.Add(this);
						this._ArchiveTabID = value.ID;
					}
					else
					{
						this._ArchiveTabID = default(int);
					}
					this.SendPropertyChanged("ArchiveTab");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoxType_ArchiveField", Storage="_BoxType", ThisKey="BoxTypeCode", OtherKey="Code", IsForeignKey=true)]
		public BoxType BoxType
		{
			get
			{
				return this._BoxType.Entity;
			}
			set
			{
				BoxType previousValue = this._BoxType.Entity;
				if (((previousValue != value) 
							|| (this._BoxType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoxType.Entity = null;
						previousValue.ArchiveFields.Remove(this);
					}
					this._BoxType.Entity = value;
					if ((value != null))
					{
						value.ArchiveFields.Add(this);
						this._BoxTypeCode = value.Code;
					}
					else
					{
						this._BoxTypeCode = default(int);
					}
					this.SendPropertyChanged("BoxType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldStatus_ArchiveField", Storage="_FieldStatus", ThisKey="StatusCode", OtherKey="Code", IsForeignKey=true)]
		public FieldStatus FieldStatus
		{
			get
			{
				return this._FieldStatus.Entity;
			}
			set
			{
				FieldStatus previousValue = this._FieldStatus.Entity;
				if (((previousValue != value) 
							|| (this._FieldStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldStatus.Entity = null;
						previousValue.ArchiveFields.Remove(this);
					}
					this._FieldStatus.Entity = value;
					if ((value != null))
					{
						value.ArchiveFields.Add(this);
						this._StatusCode = value.Code;
					}
					else
					{
						this._StatusCode = default(int);
					}
					this.SendPropertyChanged("FieldStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_ArchiveField", Storage="_FieldType", ThisKey="FieldTypeCode", OtherKey="Code", IsForeignKey=true)]
		public FieldType FieldType
		{
			get
			{
				return this._FieldType.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType.Entity;
				if (((previousValue != value) 
							|| (this._FieldType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType.Entity = null;
						previousValue.ArchiveFields.Remove(this);
					}
					this._FieldType.Entity = value;
					if ((value != null))
					{
						value.ArchiveFields.Add(this);
						this._FieldTypeCode = value.Code;
					}
					else
					{
						this._FieldTypeCode = default(int);
					}
					this.SendPropertyChanged("FieldType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveSubGroupFields(ArchiveSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveField = this;
		}
		
		private void detach_ArchiveSubGroupFields(ArchiveSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveField = null;
		}
		
		private void attach_CounterFieldSettings(CounterFieldSetting entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveField = this;
		}
		
		private void detach_CounterFieldSettings(CounterFieldSetting entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveField = null;
		}
		
		private void attach_DisplayFields(DisplayField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveField = this;
		}
		
		private void detach_DisplayFields(DisplayField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveField = null;
		}
		
		private void attach_ReportDetails(ReportDetail entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveField = this;
		}
		
		private void detach_ReportDetails(ReportDetail entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveField = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveSetting")]
	public partial class ArchiveSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Data.Linq.Binary _Background;
		
		private string _BackupPath;
		
		private bool _AutoBackup;
		
		private string _OrganName;
		
		private System.Data.Linq.Binary _Logo;
		
		private string _DocumentsPathOrDatabaseName;
		
		private string _PersonnelNumber_Label;
		
		private int _PersonnelNumber_MinLength;
		
		private int _PersonnelNumber_MaxLength;
		
		private bool _InfoGroupTab;
		
		private bool _UseDatabase;
		
		private string _DatabasePath;
		
		private string _DefaultFilesSavePath;
		
		private System.Nullable<int> _DefaultImageFormatCode;
		
		private System.Nullable<int> _DefaultCompressionTypeCode;
		
		private int _MaxDocumentsSize;
		
		private EntityRef<CompressionType> _CompressionType;
		
		private EntityRef<ImageFormat> _ImageFormat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBackgroundChanging(System.Data.Linq.Binary value);
    partial void OnBackgroundChanged();
    partial void OnBackupPathChanging(string value);
    partial void OnBackupPathChanged();
    partial void OnAutoBackupChanging(bool value);
    partial void OnAutoBackupChanged();
    partial void OnOrganNameChanging(string value);
    partial void OnOrganNameChanged();
    partial void OnLogoChanging(System.Data.Linq.Binary value);
    partial void OnLogoChanged();
    partial void OnDocumentsPathOrDatabaseNameChanging(string value);
    partial void OnDocumentsPathOrDatabaseNameChanged();
    partial void OnPersonnelNumber_LabelChanging(string value);
    partial void OnPersonnelNumber_LabelChanged();
    partial void OnPersonnelNumber_MinLengthChanging(int value);
    partial void OnPersonnelNumber_MinLengthChanged();
    partial void OnPersonnelNumber_MaxLengthChanging(int value);
    partial void OnPersonnelNumber_MaxLengthChanged();
    partial void OnInfoGroupTabChanging(bool value);
    partial void OnInfoGroupTabChanged();
    partial void OnUseDatabaseChanging(bool value);
    partial void OnUseDatabaseChanged();
    partial void OnDatabasePathChanging(string value);
    partial void OnDatabasePathChanged();
    partial void OnDefaultFilesSavePathChanging(string value);
    partial void OnDefaultFilesSavePathChanged();
    partial void OnDefaultImageFormatCodeChanging(System.Nullable<int> value);
    partial void OnDefaultImageFormatCodeChanged();
    partial void OnDefaultCompressionTypeCodeChanging(System.Nullable<int> value);
    partial void OnDefaultCompressionTypeCodeChanged();
    partial void OnMaxDocumentsSizeChanging(int value);
    partial void OnMaxDocumentsSizeChanged();
    #endregion
		
		public ArchiveSetting()
		{
			this._CompressionType = default(EntityRef<CompressionType>);
			this._ImageFormat = default(EntityRef<ImageFormat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Background", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Background
		{
			get
			{
				return this._Background;
			}
			set
			{
				if ((this._Background != value))
				{
					this.OnBackgroundChanging(value);
					this.SendPropertyChanging();
					this._Background = value;
					this.SendPropertyChanged("Background");
					this.OnBackgroundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackupPath", DbType="NVarChar(250)")]
		public string BackupPath
		{
			get
			{
				return this._BackupPath;
			}
			set
			{
				if ((this._BackupPath != value))
				{
					this.OnBackupPathChanging(value);
					this.SendPropertyChanging();
					this._BackupPath = value;
					this.SendPropertyChanged("BackupPath");
					this.OnBackupPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoBackup", DbType="Bit NOT NULL")]
		public bool AutoBackup
		{
			get
			{
				return this._AutoBackup;
			}
			set
			{
				if ((this._AutoBackup != value))
				{
					this.OnAutoBackupChanging(value);
					this.SendPropertyChanging();
					this._AutoBackup = value;
					this.SendPropertyChanged("AutoBackup");
					this.OnAutoBackupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string OrganName
		{
			get
			{
				return this._OrganName;
			}
			set
			{
				if ((this._OrganName != value))
				{
					this.OnOrganNameChanging(value);
					this.SendPropertyChanging();
					this._OrganName = value;
					this.SendPropertyChanged("OrganName");
					this.OnOrganNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentsPathOrDatabaseName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string DocumentsPathOrDatabaseName
		{
			get
			{
				return this._DocumentsPathOrDatabaseName;
			}
			set
			{
				if ((this._DocumentsPathOrDatabaseName != value))
				{
					this.OnDocumentsPathOrDatabaseNameChanging(value);
					this.SendPropertyChanging();
					this._DocumentsPathOrDatabaseName = value;
					this.SendPropertyChanged("DocumentsPathOrDatabaseName");
					this.OnDocumentsPathOrDatabaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber_Label", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonnelNumber_Label
		{
			get
			{
				return this._PersonnelNumber_Label;
			}
			set
			{
				if ((this._PersonnelNumber_Label != value))
				{
					this.OnPersonnelNumber_LabelChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber_Label = value;
					this.SendPropertyChanged("PersonnelNumber_Label");
					this.OnPersonnelNumber_LabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber_MinLength", DbType="Int NOT NULL")]
		public int PersonnelNumber_MinLength
		{
			get
			{
				return this._PersonnelNumber_MinLength;
			}
			set
			{
				if ((this._PersonnelNumber_MinLength != value))
				{
					this.OnPersonnelNumber_MinLengthChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber_MinLength = value;
					this.SendPropertyChanged("PersonnelNumber_MinLength");
					this.OnPersonnelNumber_MinLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber_MaxLength", DbType="Int NOT NULL")]
		public int PersonnelNumber_MaxLength
		{
			get
			{
				return this._PersonnelNumber_MaxLength;
			}
			set
			{
				if ((this._PersonnelNumber_MaxLength != value))
				{
					this.OnPersonnelNumber_MaxLengthChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber_MaxLength = value;
					this.SendPropertyChanged("PersonnelNumber_MaxLength");
					this.OnPersonnelNumber_MaxLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoGroupTab", DbType="Bit NOT NULL")]
		public bool InfoGroupTab
		{
			get
			{
				return this._InfoGroupTab;
			}
			set
			{
				if ((this._InfoGroupTab != value))
				{
					this.OnInfoGroupTabChanging(value);
					this.SendPropertyChanging();
					this._InfoGroupTab = value;
					this.SendPropertyChanged("InfoGroupTab");
					this.OnInfoGroupTabChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseDatabase", DbType="Bit NOT NULL")]
		public bool UseDatabase
		{
			get
			{
				return this._UseDatabase;
			}
			set
			{
				if ((this._UseDatabase != value))
				{
					this.OnUseDatabaseChanging(value);
					this.SendPropertyChanging();
					this._UseDatabase = value;
					this.SendPropertyChanged("UseDatabase");
					this.OnUseDatabaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabasePath", DbType="NVarChar(250)")]
		public string DatabasePath
		{
			get
			{
				return this._DatabasePath;
			}
			set
			{
				if ((this._DatabasePath != value))
				{
					this.OnDatabasePathChanging(value);
					this.SendPropertyChanging();
					this._DatabasePath = value;
					this.SendPropertyChanged("DatabasePath");
					this.OnDatabasePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultFilesSavePath", DbType="NVarChar(250)")]
		public string DefaultFilesSavePath
		{
			get
			{
				return this._DefaultFilesSavePath;
			}
			set
			{
				if ((this._DefaultFilesSavePath != value))
				{
					this.OnDefaultFilesSavePathChanging(value);
					this.SendPropertyChanging();
					this._DefaultFilesSavePath = value;
					this.SendPropertyChanged("DefaultFilesSavePath");
					this.OnDefaultFilesSavePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultImageFormatCode", DbType="Int")]
		public System.Nullable<int> DefaultImageFormatCode
		{
			get
			{
				return this._DefaultImageFormatCode;
			}
			set
			{
				if ((this._DefaultImageFormatCode != value))
				{
					if (this._ImageFormat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultImageFormatCodeChanging(value);
					this.SendPropertyChanging();
					this._DefaultImageFormatCode = value;
					this.SendPropertyChanged("DefaultImageFormatCode");
					this.OnDefaultImageFormatCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultCompressionTypeCode", DbType="Int")]
		public System.Nullable<int> DefaultCompressionTypeCode
		{
			get
			{
				return this._DefaultCompressionTypeCode;
			}
			set
			{
				if ((this._DefaultCompressionTypeCode != value))
				{
					if (this._CompressionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultCompressionTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._DefaultCompressionTypeCode = value;
					this.SendPropertyChanged("DefaultCompressionTypeCode");
					this.OnDefaultCompressionTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxDocumentsSize", DbType="Int NOT NULL")]
		public int MaxDocumentsSize
		{
			get
			{
				return this._MaxDocumentsSize;
			}
			set
			{
				if ((this._MaxDocumentsSize != value))
				{
					this.OnMaxDocumentsSizeChanging(value);
					this.SendPropertyChanging();
					this._MaxDocumentsSize = value;
					this.SendPropertyChanged("MaxDocumentsSize");
					this.OnMaxDocumentsSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompressionType_ArchiveSetting", Storage="_CompressionType", ThisKey="DefaultCompressionTypeCode", OtherKey="Code", IsForeignKey=true)]
		public CompressionType CompressionType
		{
			get
			{
				return this._CompressionType.Entity;
			}
			set
			{
				CompressionType previousValue = this._CompressionType.Entity;
				if (((previousValue != value) 
							|| (this._CompressionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompressionType.Entity = null;
						previousValue.ArchiveSettings.Remove(this);
					}
					this._CompressionType.Entity = value;
					if ((value != null))
					{
						value.ArchiveSettings.Add(this);
						this._DefaultCompressionTypeCode = value.Code;
					}
					else
					{
						this._DefaultCompressionTypeCode = default(Nullable<int>);
					}
					this.SendPropertyChanged("CompressionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImageFormat_ArchiveSetting", Storage="_ImageFormat", ThisKey="DefaultImageFormatCode", OtherKey="Code", IsForeignKey=true)]
		public ImageFormat ImageFormat
		{
			get
			{
				return this._ImageFormat.Entity;
			}
			set
			{
				ImageFormat previousValue = this._ImageFormat.Entity;
				if (((previousValue != value) 
							|| (this._ImageFormat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImageFormat.Entity = null;
						previousValue.ArchiveSettings.Remove(this);
					}
					this._ImageFormat.Entity = value;
					if ((value != null))
					{
						value.ArchiveSettings.Add(this);
						this._DefaultImageFormatCode = value.Code;
					}
					else
					{
						this._DefaultImageFormatCode = default(Nullable<int>);
					}
					this.SendPropertyChanged("ImageFormat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveSubGroupField")]
	public partial class ArchiveSubGroupField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArchiveFieldID;
		
		private string _Label;
		
		private string _FieldName;
		
		private int _FieldTypeCode;
		
		private int _StatusCode;
		
		private int _BoxTypeCode;
		
		private bool _AutoComplete;
		
		private System.Nullable<int> _MinLength;
		
		private System.Nullable<int> _MaxLength;
		
		private System.Nullable<double> _MinValue;
		
		private System.Nullable<double> _MaxValue;
		
		private string _DefaultValue;
		
		private System.Nullable<int> _IDParent;
		
		private int _Index;
		
		private EntityRef<ArchiveField> _ArchiveField;
		
		private EntityRef<BoxType> _BoxType;
		
		private EntityRef<FieldStatus> _FieldStatus;
		
		private EntityRef<FieldType> _FieldType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArchiveFieldIDChanging(int value);
    partial void OnArchiveFieldIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnFieldTypeCodeChanging(int value);
    partial void OnFieldTypeCodeChanged();
    partial void OnStatusCodeChanging(int value);
    partial void OnStatusCodeChanged();
    partial void OnBoxTypeCodeChanging(int value);
    partial void OnBoxTypeCodeChanged();
    partial void OnAutoCompleteChanging(bool value);
    partial void OnAutoCompleteChanged();
    partial void OnMinLengthChanging(System.Nullable<int> value);
    partial void OnMinLengthChanged();
    partial void OnMaxLengthChanging(System.Nullable<int> value);
    partial void OnMaxLengthChanged();
    partial void OnMinValueChanging(System.Nullable<double> value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(System.Nullable<double> value);
    partial void OnMaxValueChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnIDParentChanging(System.Nullable<int> value);
    partial void OnIDParentChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    #endregion
		
		public ArchiveSubGroupField()
		{
			this._ArchiveField = default(EntityRef<ArchiveField>);
			this._BoxType = default(EntityRef<BoxType>);
			this._FieldStatus = default(EntityRef<FieldStatus>);
			this._FieldType = default(EntityRef<FieldType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveFieldID", DbType="Int NOT NULL")]
		public int ArchiveFieldID
		{
			get
			{
				return this._ArchiveFieldID;
			}
			set
			{
				if ((this._ArchiveFieldID != value))
				{
					if (this._ArchiveField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveFieldID = value;
					this.SendPropertyChanged("ArchiveFieldID");
					this.OnArchiveFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(MAX)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldTypeCode", DbType="Int NOT NULL")]
		public int FieldTypeCode
		{
			get
			{
				return this._FieldTypeCode;
			}
			set
			{
				if ((this._FieldTypeCode != value))
				{
					if (this._FieldType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._FieldTypeCode = value;
					this.SendPropertyChanged("FieldTypeCode");
					this.OnFieldTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusCode", DbType="Int NOT NULL")]
		public int StatusCode
		{
			get
			{
				return this._StatusCode;
			}
			set
			{
				if ((this._StatusCode != value))
				{
					if (this._FieldStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._StatusCode = value;
					this.SendPropertyChanged("StatusCode");
					this.OnStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxTypeCode", DbType="Int NOT NULL")]
		public int BoxTypeCode
		{
			get
			{
				return this._BoxTypeCode;
			}
			set
			{
				if ((this._BoxTypeCode != value))
				{
					if (this._BoxType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoxTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._BoxTypeCode = value;
					this.SendPropertyChanged("BoxTypeCode");
					this.OnBoxTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoComplete", DbType="Bit NOT NULL")]
		public bool AutoComplete
		{
			get
			{
				return this._AutoComplete;
			}
			set
			{
				if ((this._AutoComplete != value))
				{
					this.OnAutoCompleteChanging(value);
					this.SendPropertyChanging();
					this._AutoComplete = value;
					this.SendPropertyChanged("AutoComplete");
					this.OnAutoCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinLength", DbType="Int")]
		public System.Nullable<int> MinLength
		{
			get
			{
				return this._MinLength;
			}
			set
			{
				if ((this._MinLength != value))
				{
					this.OnMinLengthChanging(value);
					this.SendPropertyChanging();
					this._MinLength = value;
					this.SendPropertyChanged("MinLength");
					this.OnMinLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxLength", DbType="Int")]
		public System.Nullable<int> MaxLength
		{
			get
			{
				return this._MaxLength;
			}
			set
			{
				if ((this._MaxLength != value))
				{
					this.OnMaxLengthChanging(value);
					this.SendPropertyChanging();
					this._MaxLength = value;
					this.SendPropertyChanged("MaxLength");
					this.OnMaxLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="Float")]
		public System.Nullable<double> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Float")]
		public System.Nullable<double> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="NVarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDParent", DbType="Int")]
		public System.Nullable<int> IDParent
		{
			get
			{
				return this._IDParent;
			}
			set
			{
				if ((this._IDParent != value))
				{
					this.OnIDParentChanging(value);
					this.SendPropertyChanging();
					this._IDParent = value;
					this.SendPropertyChanged("IDParent");
					this.OnIDParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveField_ArchiveSubGroupField", Storage="_ArchiveField", ThisKey="ArchiveFieldID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ArchiveField ArchiveField
		{
			get
			{
				return this._ArchiveField.Entity;
			}
			set
			{
				ArchiveField previousValue = this._ArchiveField.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveField.Entity = null;
						previousValue.ArchiveSubGroupFields.Remove(this);
					}
					this._ArchiveField.Entity = value;
					if ((value != null))
					{
						value.ArchiveSubGroupFields.Add(this);
						this._ArchiveFieldID = value.ID;
					}
					else
					{
						this._ArchiveFieldID = default(int);
					}
					this.SendPropertyChanged("ArchiveField");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoxType_ArchiveSubGroupField", Storage="_BoxType", ThisKey="BoxTypeCode", OtherKey="Code", IsForeignKey=true)]
		public BoxType BoxType
		{
			get
			{
				return this._BoxType.Entity;
			}
			set
			{
				BoxType previousValue = this._BoxType.Entity;
				if (((previousValue != value) 
							|| (this._BoxType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoxType.Entity = null;
						previousValue.ArchiveSubGroupFields.Remove(this);
					}
					this._BoxType.Entity = value;
					if ((value != null))
					{
						value.ArchiveSubGroupFields.Add(this);
						this._BoxTypeCode = value.Code;
					}
					else
					{
						this._BoxTypeCode = default(int);
					}
					this.SendPropertyChanged("BoxType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldStatus_ArchiveSubGroupField", Storage="_FieldStatus", ThisKey="StatusCode", OtherKey="Code", IsForeignKey=true)]
		public FieldStatus FieldStatus
		{
			get
			{
				return this._FieldStatus.Entity;
			}
			set
			{
				FieldStatus previousValue = this._FieldStatus.Entity;
				if (((previousValue != value) 
							|| (this._FieldStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldStatus.Entity = null;
						previousValue.ArchiveSubGroupFields.Remove(this);
					}
					this._FieldStatus.Entity = value;
					if ((value != null))
					{
						value.ArchiveSubGroupFields.Add(this);
						this._StatusCode = value.Code;
					}
					else
					{
						this._StatusCode = default(int);
					}
					this.SendPropertyChanged("FieldStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_ArchiveSubGroupField", Storage="_FieldType", ThisKey="FieldTypeCode", OtherKey="Code", IsForeignKey=true)]
		public FieldType FieldType
		{
			get
			{
				return this._FieldType.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType.Entity;
				if (((previousValue != value) 
							|| (this._FieldType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType.Entity = null;
						previousValue.ArchiveSubGroupFields.Remove(this);
					}
					this._FieldType.Entity = value;
					if ((value != null))
					{
						value.ArchiveSubGroupFields.Add(this);
						this._FieldTypeCode = value.Code;
					}
					else
					{
						this._FieldTypeCode = default(int);
					}
					this.SendPropertyChanged("FieldType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveTab")]
	public partial class ArchiveTab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TypeCode;
		
		private int _Index;
		
		private string _Name;
		
		private string _Title;
		
		private bool _Exist;
		
		private bool _HaveAttachment;
		
		private System.Nullable<int> _IDParent;
		
		private bool _Deleted;
		
		private EntitySet<ArchiveField> _ArchiveFields;
		
		private EntitySet<Document> _Documents;
		
		private EntityRef<ArchiveTabType> _ArchiveTabType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeCodeChanging(int value);
    partial void OnTypeCodeChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    partial void OnHaveAttachmentChanging(bool value);
    partial void OnHaveAttachmentChanged();
    partial void OnIDParentChanging(System.Nullable<int> value);
    partial void OnIDParentChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public ArchiveTab()
		{
			this._ArchiveFields = new EntitySet<ArchiveField>(new Action<ArchiveField>(this.attach_ArchiveFields), new Action<ArchiveField>(this.detach_ArchiveFields));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._ArchiveTabType = default(EntityRef<ArchiveTabType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeCode", DbType="Int NOT NULL")]
		public int TypeCode
		{
			get
			{
				return this._TypeCode;
			}
			set
			{
				if ((this._TypeCode != value))
				{
					if (this._ArchiveTabType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TypeCode = value;
					this.SendPropertyChanged("TypeCode");
					this.OnTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HaveAttachment", DbType="Bit NOT NULL")]
		public bool HaveAttachment
		{
			get
			{
				return this._HaveAttachment;
			}
			set
			{
				if ((this._HaveAttachment != value))
				{
					this.OnHaveAttachmentChanging(value);
					this.SendPropertyChanging();
					this._HaveAttachment = value;
					this.SendPropertyChanged("HaveAttachment");
					this.OnHaveAttachmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDParent", DbType="Int")]
		public System.Nullable<int> IDParent
		{
			get
			{
				return this._IDParent;
			}
			set
			{
				if ((this._IDParent != value))
				{
					this.OnIDParentChanging(value);
					this.SendPropertyChanging();
					this._IDParent = value;
					this.SendPropertyChanged("IDParent");
					this.OnIDParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveTab_ArchiveField", Storage="_ArchiveFields", ThisKey="ID", OtherKey="ArchiveTabID")]
		public EntitySet<ArchiveField> ArchiveFields
		{
			get
			{
				return this._ArchiveFields;
			}
			set
			{
				this._ArchiveFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveTab_Document", Storage="_Documents", ThisKey="ID", OtherKey="ArchiveTabID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveTabType_ArchiveTab", Storage="_ArchiveTabType", ThisKey="TypeCode", OtherKey="Code", IsForeignKey=true)]
		public ArchiveTabType ArchiveTabType
		{
			get
			{
				return this._ArchiveTabType.Entity;
			}
			set
			{
				ArchiveTabType previousValue = this._ArchiveTabType.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveTabType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveTabType.Entity = null;
						previousValue.ArchiveTabs.Remove(this);
					}
					this._ArchiveTabType.Entity = value;
					if ((value != null))
					{
						value.ArchiveTabs.Add(this);
						this._TypeCode = value.Code;
					}
					else
					{
						this._TypeCode = default(int);
					}
					this.SendPropertyChanged("ArchiveTabType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveFields(ArchiveField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveTab = this;
		}
		
		private void detach_ArchiveFields(ArchiveField entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveTab = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveTab = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveTab = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchiveTabType")]
	public partial class ArchiveTabType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private EntitySet<ArchiveTab> _ArchiveTabs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public ArchiveTabType()
		{
			this._ArchiveTabs = new EntitySet<ArchiveTab>(new Action<ArchiveTab>(this.attach_ArchiveTabs), new Action<ArchiveTab>(this.detach_ArchiveTabs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveTabType_ArchiveTab", Storage="_ArchiveTabs", ThisKey="Code", OtherKey="TypeCode")]
		public EntitySet<ArchiveTab> ArchiveTabs
		{
			get
			{
				return this._ArchiveTabs;
			}
			set
			{
				this._ArchiveTabs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveTabs(ArchiveTab entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveTabType = this;
		}
		
		private void detach_ArchiveTabs(ArchiveTab entity)
		{
			this.SendPropertyChanging();
			entity.ArchiveTabType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoxType")]
	public partial class BoxType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private EntitySet<ArchiveField> _ArchiveFields;
		
		private EntitySet<ArchiveSubGroupField> _ArchiveSubGroupFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public BoxType()
		{
			this._ArchiveFields = new EntitySet<ArchiveField>(new Action<ArchiveField>(this.attach_ArchiveFields), new Action<ArchiveField>(this.detach_ArchiveFields));
			this._ArchiveSubGroupFields = new EntitySet<ArchiveSubGroupField>(new Action<ArchiveSubGroupField>(this.attach_ArchiveSubGroupFields), new Action<ArchiveSubGroupField>(this.detach_ArchiveSubGroupFields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoxType_ArchiveField", Storage="_ArchiveFields", ThisKey="Code", OtherKey="BoxTypeCode")]
		public EntitySet<ArchiveField> ArchiveFields
		{
			get
			{
				return this._ArchiveFields;
			}
			set
			{
				this._ArchiveFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoxType_ArchiveSubGroupField", Storage="_ArchiveSubGroupFields", ThisKey="Code", OtherKey="BoxTypeCode")]
		public EntitySet<ArchiveSubGroupField> ArchiveSubGroupFields
		{
			get
			{
				return this._ArchiveSubGroupFields;
			}
			set
			{
				this._ArchiveSubGroupFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveFields(ArchiveField entity)
		{
			this.SendPropertyChanging();
			entity.BoxType = this;
		}
		
		private void detach_ArchiveFields(ArchiveField entity)
		{
			this.SendPropertyChanging();
			entity.BoxType = null;
		}
		
		private void attach_ArchiveSubGroupFields(ArchiveSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.BoxType = this;
		}
		
		private void detach_ArchiveSubGroupFields(ArchiveSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.BoxType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CallType")]
	public partial class CallType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public CallType()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CallType_Contact", Storage="_Contacts", ThisKey="ID", OtherKey="CallTypeID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.CallType = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.CallType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompressionType")]
	public partial class CompressionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private EntitySet<ArchiveSetting> _ArchiveSettings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public CompressionType()
		{
			this._ArchiveSettings = new EntitySet<ArchiveSetting>(new Action<ArchiveSetting>(this.attach_ArchiveSettings), new Action<ArchiveSetting>(this.detach_ArchiveSettings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompressionType_ArchiveSetting", Storage="_ArchiveSettings", ThisKey="Code", OtherKey="DefaultCompressionTypeCode")]
		public EntitySet<ArchiveSetting> ArchiveSettings
		{
			get
			{
				return this._ArchiveSettings;
			}
			set
			{
				this._ArchiveSettings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveSettings(ArchiveSetting entity)
		{
			this.SendPropertyChanging();
			entity.CompressionType = this;
		}
		
		private void detach_ArchiveSettings(ArchiveSetting entity)
		{
			this.SendPropertyChanging();
			entity.CompressionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _PersonnelNumber;
		
		private int _CallTypeID;
		
		private string _Number;
		
		private string _Comment;
		
		private EntityRef<CallType> _CallType;
		
		private EntityRef<Dossier> _Dossier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnPersonnelNumberChanging(string value);
    partial void OnPersonnelNumberChanged();
    partial void OnCallTypeIDChanging(int value);
    partial void OnCallTypeIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public Contact()
		{
			this._CallType = default(EntityRef<CallType>);
			this._Dossier = default(EntityRef<Dossier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					if (this._Dossier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonnelNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber = value;
					this.SendPropertyChanged("PersonnelNumber");
					this.OnPersonnelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallTypeID", DbType="Int NOT NULL")]
		public int CallTypeID
		{
			get
			{
				return this._CallTypeID;
			}
			set
			{
				if ((this._CallTypeID != value))
				{
					if (this._CallType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCallTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CallTypeID = value;
					this.SendPropertyChanged("CallTypeID");
					this.OnCallTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(100)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CallType_Contact", Storage="_CallType", ThisKey="CallTypeID", OtherKey="ID", IsForeignKey=true)]
		public CallType CallType
		{
			get
			{
				return this._CallType.Entity;
			}
			set
			{
				CallType previousValue = this._CallType.Entity;
				if (((previousValue != value) 
							|| (this._CallType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CallType.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._CallType.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._CallTypeID = value.ID;
					}
					else
					{
						this._CallTypeID = default(int);
					}
					this.SendPropertyChanged("CallType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Contact", Storage="_Dossier", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dossier Dossier
		{
			get
			{
				return this._Dossier.Entity;
			}
			set
			{
				Dossier previousValue = this._Dossier.Entity;
				if (((previousValue != value) 
							|| (this._Dossier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dossier.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Dossier.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._PersonnelNumber = value.PersonnelNumber;
					}
					else
					{
						this._PersonnelNumber = default(string);
					}
					this.SendPropertyChanged("Dossier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CounterFieldSetting")]
	public partial class CounterFieldSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArchiveFieldID;
		
		private int _FixedValueType;
		
		private string _FixedValue;
		
		private string _Separator;
		
		private EntityRef<ArchiveField> _ArchiveField;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArchiveFieldIDChanging(int value);
    partial void OnArchiveFieldIDChanged();
    partial void OnFixedValueTypeChanging(int value);
    partial void OnFixedValueTypeChanged();
    partial void OnFixedValueChanging(string value);
    partial void OnFixedValueChanged();
    partial void OnSeparatorChanging(string value);
    partial void OnSeparatorChanged();
    #endregion
		
		public CounterFieldSetting()
		{
			this._ArchiveField = default(EntityRef<ArchiveField>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveFieldID", DbType="Int NOT NULL")]
		public int ArchiveFieldID
		{
			get
			{
				return this._ArchiveFieldID;
			}
			set
			{
				if ((this._ArchiveFieldID != value))
				{
					if (this._ArchiveField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveFieldID = value;
					this.SendPropertyChanged("ArchiveFieldID");
					this.OnArchiveFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedValueType", DbType="Int NOT NULL")]
		public int FixedValueType
		{
			get
			{
				return this._FixedValueType;
			}
			set
			{
				if ((this._FixedValueType != value))
				{
					this.OnFixedValueTypeChanging(value);
					this.SendPropertyChanging();
					this._FixedValueType = value;
					this.SendPropertyChanged("FixedValueType");
					this.OnFixedValueTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedValue", DbType="NVarChar(50)")]
		public string FixedValue
		{
			get
			{
				return this._FixedValue;
			}
			set
			{
				if ((this._FixedValue != value))
				{
					this.OnFixedValueChanging(value);
					this.SendPropertyChanging();
					this._FixedValue = value;
					this.SendPropertyChanged("FixedValue");
					this.OnFixedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Separator", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Separator
		{
			get
			{
				return this._Separator;
			}
			set
			{
				if ((this._Separator != value))
				{
					this.OnSeparatorChanging(value);
					this.SendPropertyChanging();
					this._Separator = value;
					this.SendPropertyChanged("Separator");
					this.OnSeparatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveField_CounterFieldSetting", Storage="_ArchiveField", ThisKey="ArchiveFieldID", OtherKey="ID", IsForeignKey=true)]
		public ArchiveField ArchiveField
		{
			get
			{
				return this._ArchiveField.Entity;
			}
			set
			{
				ArchiveField previousValue = this._ArchiveField.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveField.Entity = null;
						previousValue.CounterFieldSettings.Remove(this);
					}
					this._ArchiveField.Entity = value;
					if ((value != null))
					{
						value.CounterFieldSettings.Add(this);
						this._ArchiveFieldID = value.ID;
					}
					else
					{
						this._ArchiveFieldID = default(int);
					}
					this.SendPropertyChanged("ArchiveField");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DatabaseVersion")]
	public partial class DatabaseVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Version;
		
		private System.Nullable<System.Guid> _ApplicationID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnApplicationIDChanging(System.Nullable<System.Guid> value);
    partial void OnApplicationIDChanged();
    #endregion
		
		public DatabaseVersion()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisplayField")]
	public partial class DisplayField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Code;
		
		private System.Nullable<int> _ReportID;
		
		private int _ArchiveFieldID;
		
		private EntityRef<ArchiveField> _ArchiveField;
		
		private EntityRef<DisplayFieldCode> _DisplayFieldCode;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnReportIDChanging(System.Nullable<int> value);
    partial void OnReportIDChanged();
    partial void OnArchiveFieldIDChanging(int value);
    partial void OnArchiveFieldIDChanged();
    #endregion
		
		public DisplayField()
		{
			this._ArchiveField = default(EntityRef<ArchiveField>);
			this._DisplayFieldCode = default(EntityRef<DisplayFieldCode>);
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL")]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					if (this._DisplayFieldCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int")]
		public System.Nullable<int> ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveFieldID", DbType="Int NOT NULL")]
		public int ArchiveFieldID
		{
			get
			{
				return this._ArchiveFieldID;
			}
			set
			{
				if ((this._ArchiveFieldID != value))
				{
					if (this._ArchiveField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveFieldID = value;
					this.SendPropertyChanged("ArchiveFieldID");
					this.OnArchiveFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveField_DisplayField", Storage="_ArchiveField", ThisKey="ArchiveFieldID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ArchiveField ArchiveField
		{
			get
			{
				return this._ArchiveField.Entity;
			}
			set
			{
				ArchiveField previousValue = this._ArchiveField.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveField.Entity = null;
						previousValue.DisplayFields.Remove(this);
					}
					this._ArchiveField.Entity = value;
					if ((value != null))
					{
						value.DisplayFields.Add(this);
						this._ArchiveFieldID = value.ID;
					}
					else
					{
						this._ArchiveFieldID = default(int);
					}
					this.SendPropertyChanged("ArchiveField");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DisplayFieldCode_DisplayField", Storage="_DisplayFieldCode", ThisKey="Code", OtherKey="Code", IsForeignKey=true)]
		public DisplayFieldCode DisplayFieldCode
		{
			get
			{
				return this._DisplayFieldCode.Entity;
			}
			set
			{
				DisplayFieldCode previousValue = this._DisplayFieldCode.Entity;
				if (((previousValue != value) 
							|| (this._DisplayFieldCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DisplayFieldCode.Entity = null;
						previousValue.DisplayFields.Remove(this);
					}
					this._DisplayFieldCode.Entity = value;
					if ((value != null))
					{
						value.DisplayFields.Add(this);
						this._Code = value.Code;
					}
					else
					{
						this._Code = default(int);
					}
					this.SendPropertyChanged("DisplayFieldCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_DisplayField", Storage="_Report", ThisKey="ReportID", OtherKey="ID", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.DisplayFields.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.DisplayFields.Add(this);
						this._ReportID = value.ID;
					}
					else
					{
						this._ReportID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisplayFieldCode")]
	public partial class DisplayFieldCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private EntitySet<DisplayField> _DisplayFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public DisplayFieldCode()
		{
			this._DisplayFields = new EntitySet<DisplayField>(new Action<DisplayField>(this.attach_DisplayFields), new Action<DisplayField>(this.detach_DisplayFields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DisplayFieldCode_DisplayField", Storage="_DisplayFields", ThisKey="Code", OtherKey="Code")]
		public EntitySet<DisplayField> DisplayFields
		{
			get
			{
				return this._DisplayFields;
			}
			set
			{
				this._DisplayFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DisplayFields(DisplayField entity)
		{
			this.SendPropertyChanging();
			entity.DisplayFieldCode = this;
		}
		
		private void detach_DisplayFields(DisplayField entity)
		{
			this.SendPropertyChanging();
			entity.DisplayFieldCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PersonnelNumber;
		
		private string _Number;
		
		private string _FileName;
		
		private System.Nullable<int> _ArchiveTabID;
		
		private bool _AttachedToDossier;
		
		private System.Nullable<int> _ParentDocumentID;
		
		private int _Index;
		
		private EntitySet<Document> _Documents;
		
		private EntityRef<ArchiveTab> _ArchiveTab;
		
		private EntityRef<Document> _Document1;
		
		private EntityRef<Dossier> _Dossier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonnelNumberChanging(string value);
    partial void OnPersonnelNumberChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnArchiveTabIDChanging(System.Nullable<int> value);
    partial void OnArchiveTabIDChanged();
    partial void OnAttachedToDossierChanging(bool value);
    partial void OnAttachedToDossierChanged();
    partial void OnParentDocumentIDChanging(System.Nullable<int> value);
    partial void OnParentDocumentIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    #endregion
		
		public Document()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._ArchiveTab = default(EntityRef<ArchiveTab>);
			this._Document1 = default(EntityRef<Document>);
			this._Dossier = default(EntityRef<Dossier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					if (this._Dossier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonnelNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber = value;
					this.SendPropertyChanged("PersonnelNumber");
					this.OnPersonnelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveTabID", DbType="Int")]
		public System.Nullable<int> ArchiveTabID
		{
			get
			{
				return this._ArchiveTabID;
			}
			set
			{
				if ((this._ArchiveTabID != value))
				{
					if (this._ArchiveTab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveTabIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveTabID = value;
					this.SendPropertyChanged("ArchiveTabID");
					this.OnArchiveTabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachedToDossier", DbType="Bit NOT NULL")]
		public bool AttachedToDossier
		{
			get
			{
				return this._AttachedToDossier;
			}
			set
			{
				if ((this._AttachedToDossier != value))
				{
					this.OnAttachedToDossierChanging(value);
					this.SendPropertyChanging();
					this._AttachedToDossier = value;
					this.SendPropertyChanged("AttachedToDossier");
					this.OnAttachedToDossierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentDocumentID", DbType="Int")]
		public System.Nullable<int> ParentDocumentID
		{
			get
			{
				return this._ParentDocumentID;
			}
			set
			{
				if ((this._ParentDocumentID != value))
				{
					if (this._Document1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentDocumentID = value;
					this.SendPropertyChanged("ParentDocumentID");
					this.OnParentDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Document", Storage="_Documents", ThisKey="ID", OtherKey="ParentDocumentID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveTab_Document", Storage="_ArchiveTab", ThisKey="ArchiveTabID", OtherKey="ID", IsForeignKey=true)]
		public ArchiveTab ArchiveTab
		{
			get
			{
				return this._ArchiveTab.Entity;
			}
			set
			{
				ArchiveTab previousValue = this._ArchiveTab.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveTab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveTab.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._ArchiveTab.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._ArchiveTabID = value.ID;
					}
					else
					{
						this._ArchiveTabID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ArchiveTab");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Document", Storage="_Document1", ThisKey="ParentDocumentID", OtherKey="ID", IsForeignKey=true)]
		public Document Document1
		{
			get
			{
				return this._Document1.Entity;
			}
			set
			{
				Document previousValue = this._Document1.Entity;
				if (((previousValue != value) 
							|| (this._Document1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document1.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Document1.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._ParentDocumentID = value.ID;
					}
					else
					{
						this._ParentDocumentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Document1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Document", Storage="_Dossier", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dossier Dossier
		{
			get
			{
				return this._Dossier.Entity;
			}
			set
			{
				Dossier previousValue = this._Dossier.Entity;
				if (((previousValue != value) 
							|| (this._Dossier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dossier.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Dossier.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._PersonnelNumber = value.PersonnelNumber;
					}
					else
					{
						this._PersonnelNumber = default(string);
					}
					this.SendPropertyChanged("Dossier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Document1 = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Document1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentSaveLocation")]
	public partial class DocumentSaveLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _DatabaseNameOrFilesPath;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDatabaseNameOrFilesPathChanging(string value);
    partial void OnDatabaseNameOrFilesPathChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public DocumentSaveLocation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseNameOrFilesPath", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string DatabaseNameOrFilesPath
		{
			get
			{
				return this._DatabaseNameOrFilesPath;
			}
			set
			{
				if ((this._DatabaseNameOrFilesPath != value))
				{
					this.OnDatabaseNameOrFilesPathChanging(value);
					this.SendPropertyChanging();
					this._DatabaseNameOrFilesPath = value;
					this.SendPropertyChanged("DatabaseNameOrFilesPath");
					this.OnDatabaseNameOrFilesPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dossier")]
	public partial class Dossier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PersonnelNumber;
		
		private System.Data.Linq.Binary _PersonnelImage;
		
		private string _FilesPathOrDatabaseName;
		
		private int _DossierSecurityID;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<Contact> _Contacts;
		
		private EntitySet<Document> _Documents;
		
		private EntityRef<Dossier1> _Dossier1;
		
		private EntitySet<Field_1_3> _Field_1_3s;
		
		private EntitySet<Info> _Infos;
		
		private EntitySet<Lending> _Lendings;
		
		private EntityRef<DossierType> _DossierType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonnelNumberChanging(string value);
    partial void OnPersonnelNumberChanged();
    partial void OnPersonnelImageChanging(System.Data.Linq.Binary value);
    partial void OnPersonnelImageChanged();
    partial void OnFilesPathOrDatabaseNameChanging(string value);
    partial void OnFilesPathOrDatabaseNameChanged();
    partial void OnDossierSecurityIDChanging(int value);
    partial void OnDossierSecurityIDChanged();
    #endregion
		
		public Dossier()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Dossier1 = default(EntityRef<Dossier1>);
			this._Field_1_3s = new EntitySet<Field_1_3>(new Action<Field_1_3>(this.attach_Field_1_3s), new Action<Field_1_3>(this.detach_Field_1_3s));
			this._Infos = new EntitySet<Info>(new Action<Info>(this.attach_Infos), new Action<Info>(this.detach_Infos));
			this._Lendings = new EntitySet<Lending>(new Action<Lending>(this.attach_Lendings), new Action<Lending>(this.detach_Lendings));
			this._DossierType = default(EntityRef<DossierType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					this.OnPersonnelNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber = value;
					this.SendPropertyChanged("PersonnelNumber");
					this.OnPersonnelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelImage", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PersonnelImage
		{
			get
			{
				return this._PersonnelImage;
			}
			set
			{
				if ((this._PersonnelImage != value))
				{
					this.OnPersonnelImageChanging(value);
					this.SendPropertyChanging();
					this._PersonnelImage = value;
					this.SendPropertyChanged("PersonnelImage");
					this.OnPersonnelImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilesPathOrDatabaseName", DbType="NVarChar(MAX)")]
		public string FilesPathOrDatabaseName
		{
			get
			{
				return this._FilesPathOrDatabaseName;
			}
			set
			{
				if ((this._FilesPathOrDatabaseName != value))
				{
					this.OnFilesPathOrDatabaseNameChanging(value);
					this.SendPropertyChanging();
					this._FilesPathOrDatabaseName = value;
					this.SendPropertyChanged("FilesPathOrDatabaseName");
					this.OnFilesPathOrDatabaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DossierSecurityID", DbType="Int NOT NULL")]
		public int DossierSecurityID
		{
			get
			{
				return this._DossierSecurityID;
			}
			set
			{
				if ((this._DossierSecurityID != value))
				{
					if (this._DossierType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDossierSecurityIDChanging(value);
					this.SendPropertyChanging();
					this._DossierSecurityID = value;
					this.SendPropertyChanged("DossierSecurityID");
					this.OnDossierSecurityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Address", Storage="_Addresses", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Contact", Storage="_Contacts", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Document", Storage="_Documents", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Dossier1", Storage="_Dossier1", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber", IsUnique=true, IsForeignKey=false)]
		public Dossier1 Dossier1
		{
			get
			{
				return this._Dossier1.Entity;
			}
			set
			{
				Dossier1 previousValue = this._Dossier1.Entity;
				if (((previousValue != value) 
							|| (this._Dossier1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dossier1.Entity = null;
						previousValue.Dossier = null;
					}
					this._Dossier1.Entity = value;
					if ((value != null))
					{
						value.Dossier = this;
					}
					this.SendPropertyChanged("Dossier1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Field_1_3", Storage="_Field_1_3s", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber")]
		public EntitySet<Field_1_3> Field_1_3s
		{
			get
			{
				return this._Field_1_3s;
			}
			set
			{
				this._Field_1_3s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Info", Storage="_Infos", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber")]
		public EntitySet<Info> Infos
		{
			get
			{
				return this._Infos;
			}
			set
			{
				this._Infos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Lending", Storage="_Lendings", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber")]
		public EntitySet<Lending> Lendings
		{
			get
			{
				return this._Lendings;
			}
			set
			{
				this._Lendings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DossierType_Dossier", Storage="_DossierType", ThisKey="DossierSecurityID", OtherKey="ID", IsForeignKey=true)]
		public DossierType DossierType
		{
			get
			{
				return this._DossierType.Entity;
			}
			set
			{
				DossierType previousValue = this._DossierType.Entity;
				if (((previousValue != value) 
							|| (this._DossierType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DossierType.Entity = null;
						previousValue.Dossiers.Remove(this);
					}
					this._DossierType.Entity = value;
					if ((value != null))
					{
						value.Dossiers.Add(this);
						this._DossierSecurityID = value.ID;
					}
					else
					{
						this._DossierSecurityID = default(int);
					}
					this.SendPropertyChanged("DossierType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = null;
		}
		
		private void attach_Field_1_3s(Field_1_3 entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = this;
		}
		
		private void detach_Field_1_3s(Field_1_3 entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = null;
		}
		
		private void attach_Infos(Info entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = this;
		}
		
		private void detach_Infos(Info entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = null;
		}
		
		private void attach_Lendings(Lending entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = this;
		}
		
		private void detach_Lendings(Lending entity)
		{
			this.SendPropertyChanging();
			entity.Dossier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dossier1")]
	public partial class Dossier1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PersonnelNumber;
		
		private System.Nullable<int> _Field1;
		
		private System.Nullable<int> _Field2;
		
		private bool _Field4;
		
		private EntityRef<Dossier> _Dossier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonnelNumberChanging(string value);
    partial void OnPersonnelNumberChanged();
    partial void OnField1Changing(System.Nullable<int> value);
    partial void OnField1Changed();
    partial void OnField2Changing(System.Nullable<int> value);
    partial void OnField2Changed();
    partial void OnField4Changing(bool value);
    partial void OnField4Changed();
    #endregion
		
		public Dossier1()
		{
			this._Dossier = default(EntityRef<Dossier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					if (this._Dossier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonnelNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber = value;
					this.SendPropertyChanged("PersonnelNumber");
					this.OnPersonnelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field1", DbType="Int")]
		public System.Nullable<int> Field1
		{
			get
			{
				return this._Field1;
			}
			set
			{
				if ((this._Field1 != value))
				{
					this.OnField1Changing(value);
					this.SendPropertyChanging();
					this._Field1 = value;
					this.SendPropertyChanged("Field1");
					this.OnField1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field2", DbType="Int")]
		public System.Nullable<int> Field2
		{
			get
			{
				return this._Field2;
			}
			set
			{
				if ((this._Field2 != value))
				{
					this.OnField2Changing(value);
					this.SendPropertyChanging();
					this._Field2 = value;
					this.SendPropertyChanged("Field2");
					this.OnField2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field4", DbType="Bit NOT NULL")]
		public bool Field4
		{
			get
			{
				return this._Field4;
			}
			set
			{
				if ((this._Field4 != value))
				{
					this.OnField4Changing(value);
					this.SendPropertyChanging();
					this._Field4 = value;
					this.SendPropertyChanged("Field4");
					this.OnField4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Dossier1", Storage="_Dossier", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dossier Dossier
		{
			get
			{
				return this._Dossier.Entity;
			}
			set
			{
				Dossier previousValue = this._Dossier.Entity;
				if (((previousValue != value) 
							|| (this._Dossier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dossier.Entity = null;
						previousValue.Dossier1 = null;
					}
					this._Dossier.Entity = value;
					if ((value != null))
					{
						value.Dossier1 = this;
						this._PersonnelNumber = value.PersonnelNumber;
					}
					else
					{
						this._PersonnelNumber = default(string);
					}
					this.SendPropertyChanged("Dossier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DossierType")]
	public partial class DossierType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private System.Nullable<bool> _IsDefault;
		
		private EntitySet<Dossier> _Dossiers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsDefaultChanging(System.Nullable<bool> value);
    partial void OnIsDefaultChanged();
    #endregion
		
		public DossierType()
		{
			this._Dossiers = new EntitySet<Dossier>(new Action<Dossier>(this.attach_Dossiers), new Action<Dossier>(this.detach_Dossiers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefault", DbType="Bit")]
		public System.Nullable<bool> IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DossierType_Dossier", Storage="_Dossiers", ThisKey="ID", OtherKey="DossierSecurityID")]
		public EntitySet<Dossier> Dossiers
		{
			get
			{
				return this._Dossiers;
			}
			set
			{
				this._Dossiers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dossiers(Dossier entity)
		{
			this.SendPropertyChanging();
			entity.DossierType = this;
		}
		
		private void detach_Dossiers(Dossier entity)
		{
			this.SendPropertyChanging();
			entity.DossierType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Field_1_3")]
	public partial class Field_1_3 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PersonnelNumber;
		
		private System.Nullable<int> _Field_1_3_1;
		
		private System.Nullable<int> _Field_1_3_2;
		
		private EntityRef<Dossier> _Dossier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonnelNumberChanging(string value);
    partial void OnPersonnelNumberChanged();
    partial void OnField_1_3_1Changing(System.Nullable<int> value);
    partial void OnField_1_3_1Changed();
    partial void OnField_1_3_2Changing(System.Nullable<int> value);
    partial void OnField_1_3_2Changed();
    #endregion
		
		public Field_1_3()
		{
			this._Dossier = default(EntityRef<Dossier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					if (this._Dossier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonnelNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber = value;
					this.SendPropertyChanged("PersonnelNumber");
					this.OnPersonnelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field_1_3_1", DbType="Int")]
		public System.Nullable<int> Field_1_3_1
		{
			get
			{
				return this._Field_1_3_1;
			}
			set
			{
				if ((this._Field_1_3_1 != value))
				{
					this.OnField_1_3_1Changing(value);
					this.SendPropertyChanging();
					this._Field_1_3_1 = value;
					this.SendPropertyChanged("Field_1_3_1");
					this.OnField_1_3_1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field_1_3_2", DbType="Int")]
		public System.Nullable<int> Field_1_3_2
		{
			get
			{
				return this._Field_1_3_2;
			}
			set
			{
				if ((this._Field_1_3_2 != value))
				{
					this.OnField_1_3_2Changing(value);
					this.SendPropertyChanging();
					this._Field_1_3_2 = value;
					this.SendPropertyChanged("Field_1_3_2");
					this.OnField_1_3_2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Field_1_3", Storage="_Dossier", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dossier Dossier
		{
			get
			{
				return this._Dossier.Entity;
			}
			set
			{
				Dossier previousValue = this._Dossier.Entity;
				if (((previousValue != value) 
							|| (this._Dossier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dossier.Entity = null;
						previousValue.Field_1_3s.Remove(this);
					}
					this._Dossier.Entity = value;
					if ((value != null))
					{
						value.Field_1_3s.Add(this);
						this._PersonnelNumber = value.PersonnelNumber;
					}
					else
					{
						this._PersonnelNumber = default(string);
					}
					this.SendPropertyChanged("Dossier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldStatus")]
	public partial class FieldStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private EntitySet<ArchiveField> _ArchiveFields;
		
		private EntitySet<ArchiveSubGroupField> _ArchiveSubGroupFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public FieldStatus()
		{
			this._ArchiveFields = new EntitySet<ArchiveField>(new Action<ArchiveField>(this.attach_ArchiveFields), new Action<ArchiveField>(this.detach_ArchiveFields));
			this._ArchiveSubGroupFields = new EntitySet<ArchiveSubGroupField>(new Action<ArchiveSubGroupField>(this.attach_ArchiveSubGroupFields), new Action<ArchiveSubGroupField>(this.detach_ArchiveSubGroupFields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldStatus_ArchiveField", Storage="_ArchiveFields", ThisKey="Code", OtherKey="StatusCode")]
		public EntitySet<ArchiveField> ArchiveFields
		{
			get
			{
				return this._ArchiveFields;
			}
			set
			{
				this._ArchiveFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldStatus_ArchiveSubGroupField", Storage="_ArchiveSubGroupFields", ThisKey="Code", OtherKey="StatusCode")]
		public EntitySet<ArchiveSubGroupField> ArchiveSubGroupFields
		{
			get
			{
				return this._ArchiveSubGroupFields;
			}
			set
			{
				this._ArchiveSubGroupFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveFields(ArchiveField entity)
		{
			this.SendPropertyChanging();
			entity.FieldStatus = this;
		}
		
		private void detach_ArchiveFields(ArchiveField entity)
		{
			this.SendPropertyChanging();
			entity.FieldStatus = null;
		}
		
		private void attach_ArchiveSubGroupFields(ArchiveSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldStatus = this;
		}
		
		private void detach_ArchiveSubGroupFields(ArchiveSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldType")]
	public partial class FieldType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private EntitySet<ArchiveField> _ArchiveFields;
		
		private EntitySet<ArchiveSubGroupField> _ArchiveSubGroupFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public FieldType()
		{
			this._ArchiveFields = new EntitySet<ArchiveField>(new Action<ArchiveField>(this.attach_ArchiveFields), new Action<ArchiveField>(this.detach_ArchiveFields));
			this._ArchiveSubGroupFields = new EntitySet<ArchiveSubGroupField>(new Action<ArchiveSubGroupField>(this.attach_ArchiveSubGroupFields), new Action<ArchiveSubGroupField>(this.detach_ArchiveSubGroupFields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_ArchiveField", Storage="_ArchiveFields", ThisKey="Code", OtherKey="FieldTypeCode")]
		public EntitySet<ArchiveField> ArchiveFields
		{
			get
			{
				return this._ArchiveFields;
			}
			set
			{
				this._ArchiveFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_ArchiveSubGroupField", Storage="_ArchiveSubGroupFields", ThisKey="Code", OtherKey="FieldTypeCode")]
		public EntitySet<ArchiveSubGroupField> ArchiveSubGroupFields
		{
			get
			{
				return this._ArchiveSubGroupFields;
			}
			set
			{
				this._ArchiveSubGroupFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveFields(ArchiveField entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = this;
		}
		
		private void detach_ArchiveFields(ArchiveField entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = null;
		}
		
		private void attach_ArchiveSubGroupFields(ArchiveSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = this;
		}
		
		private void detach_ArchiveSubGroupFields(ArchiveSubGroupField entity)
		{
			this.SendPropertyChanging();
			entity.FieldType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageFormat")]
	public partial class ImageFormat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Title;
		
		private EntitySet<ArchiveSetting> _ArchiveSettings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public ImageFormat()
		{
			this._ArchiveSettings = new EntitySet<ArchiveSetting>(new Action<ArchiveSetting>(this.attach_ArchiveSettings), new Action<ArchiveSetting>(this.detach_ArchiveSettings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImageFormat_ArchiveSetting", Storage="_ArchiveSettings", ThisKey="Code", OtherKey="DefaultImageFormatCode")]
		public EntitySet<ArchiveSetting> ArchiveSettings
		{
			get
			{
				return this._ArchiveSettings;
			}
			set
			{
				this._ArchiveSettings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArchiveSettings(ArchiveSetting entity)
		{
			this.SendPropertyChanging();
			entity.ImageFormat = this;
		}
		
		private void detach_ArchiveSettings(ArchiveSetting entity)
		{
			this.SendPropertyChanging();
			entity.ImageFormat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Info")]
	public partial class Info : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PersonnelNumber;
		
		private string _Comment;
		
		private string _Email;
		
		private string _Website;
		
		private EntityRef<Dossier> _Dossier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonnelNumberChanging(string value);
    partial void OnPersonnelNumberChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    #endregion
		
		public Info()
		{
			this._Dossier = default(EntityRef<Dossier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					if (this._Dossier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonnelNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber = value;
					this.SendPropertyChanged("PersonnelNumber");
					this.OnPersonnelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Info", Storage="_Dossier", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dossier Dossier
		{
			get
			{
				return this._Dossier.Entity;
			}
			set
			{
				Dossier previousValue = this._Dossier.Entity;
				if (((previousValue != value) 
							|| (this._Dossier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dossier.Entity = null;
						previousValue.Infos.Remove(this);
					}
					this._Dossier.Entity = value;
					if ((value != null))
					{
						value.Infos.Add(this);
						this._PersonnelNumber = value.PersonnelNumber;
					}
					else
					{
						this._PersonnelNumber = default(string);
					}
					this.SendPropertyChanged("Dossier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LegalPerson")]
	public partial class LegalPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _CompanyNumber;
		
		private string _EconomicNumber;
		
		private string _Address;
		
		private string _Tel;
		
		private string _Manager;
		
		private string _ManagerTel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyNumberChanging(string value);
    partial void OnCompanyNumberChanged();
    partial void OnEconomicNumberChanging(string value);
    partial void OnEconomicNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnManagerChanging(string value);
    partial void OnManagerChanged();
    partial void OnManagerTelChanging(string value);
    partial void OnManagerTelChanged();
    #endregion
		
		public LegalPerson()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyNumber", DbType="NVarChar(50)")]
		public string CompanyNumber
		{
			get
			{
				return this._CompanyNumber;
			}
			set
			{
				if ((this._CompanyNumber != value))
				{
					this.OnCompanyNumberChanging(value);
					this.SendPropertyChanging();
					this._CompanyNumber = value;
					this.SendPropertyChanged("CompanyNumber");
					this.OnCompanyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EconomicNumber", DbType="NVarChar(50)")]
		public string EconomicNumber
		{
			get
			{
				return this._EconomicNumber;
			}
			set
			{
				if ((this._EconomicNumber != value))
				{
					this.OnEconomicNumberChanging(value);
					this.SendPropertyChanging();
					this._EconomicNumber = value;
					this.SendPropertyChanged("EconomicNumber");
					this.OnEconomicNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(50)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager", DbType="NVarChar(50)")]
		public string Manager
		{
			get
			{
				return this._Manager;
			}
			set
			{
				if ((this._Manager != value))
				{
					this.OnManagerChanging(value);
					this.SendPropertyChanging();
					this._Manager = value;
					this.SendPropertyChanged("Manager");
					this.OnManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerTel", DbType="NVarChar(50)")]
		public string ManagerTel
		{
			get
			{
				return this._ManagerTel;
			}
			set
			{
				if ((this._ManagerTel != value))
				{
					this.OnManagerTelChanging(value);
					this.SendPropertyChanging();
					this._ManagerTel = value;
					this.SendPropertyChanged("ManagerTel");
					this.OnManagerTelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lending")]
	public partial class Lending : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PersonnelNumber;
		
		private int _PersonID;
		
		private string _Intention;
		
		private string _Date;
		
		private string _Time;
		
		private int _DurationDay;
		
		private int _DurationHour;
		
		private string _ReturnDate;
		
		private string _ReturnTime;
		
		private System.Nullable<int> _RealDurationDay;
		
		private System.Nullable<int> _RealDurationHour;
		
		private string _PersonSender;
		
		private EntityRef<Dossier> _Dossier;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonnelNumberChanging(string value);
    partial void OnPersonnelNumberChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnIntentionChanging(string value);
    partial void OnIntentionChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnDurationDayChanging(int value);
    partial void OnDurationDayChanged();
    partial void OnDurationHourChanging(int value);
    partial void OnDurationHourChanged();
    partial void OnReturnDateChanging(string value);
    partial void OnReturnDateChanged();
    partial void OnReturnTimeChanging(string value);
    partial void OnReturnTimeChanged();
    partial void OnRealDurationDayChanging(System.Nullable<int> value);
    partial void OnRealDurationDayChanged();
    partial void OnRealDurationHourChanging(System.Nullable<int> value);
    partial void OnRealDurationHourChanged();
    partial void OnPersonSenderChanging(string value);
    partial void OnPersonSenderChanged();
    #endregion
		
		public Lending()
		{
			this._Dossier = default(EntityRef<Dossier>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					if (this._Dossier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonnelNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonnelNumber = value;
					this.SendPropertyChanged("PersonnelNumber");
					this.OnPersonnelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Intention", DbType="NVarChar(MAX)")]
		public string Intention
		{
			get
			{
				return this._Intention;
			}
			set
			{
				if ((this._Intention != value))
				{
					this.OnIntentionChanging(value);
					this.SendPropertyChanging();
					this._Intention = value;
					this.SendPropertyChanged("Intention");
					this.OnIntentionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationDay", DbType="Int NOT NULL")]
		public int DurationDay
		{
			get
			{
				return this._DurationDay;
			}
			set
			{
				if ((this._DurationDay != value))
				{
					this.OnDurationDayChanging(value);
					this.SendPropertyChanging();
					this._DurationDay = value;
					this.SendPropertyChanged("DurationDay");
					this.OnDurationDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationHour", DbType="Int NOT NULL")]
		public int DurationHour
		{
			get
			{
				return this._DurationHour;
			}
			set
			{
				if ((this._DurationHour != value))
				{
					this.OnDurationHourChanging(value);
					this.SendPropertyChanging();
					this._DurationHour = value;
					this.SendPropertyChanged("DurationHour");
					this.OnDurationHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDate", DbType="Char(10)")]
		public string ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this.OnReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnDate = value;
					this.SendPropertyChanged("ReturnDate");
					this.OnReturnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnTime", DbType="Char(5)")]
		public string ReturnTime
		{
			get
			{
				return this._ReturnTime;
			}
			set
			{
				if ((this._ReturnTime != value))
				{
					this.OnReturnTimeChanging(value);
					this.SendPropertyChanging();
					this._ReturnTime = value;
					this.SendPropertyChanged("ReturnTime");
					this.OnReturnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealDurationDay", DbType="Int")]
		public System.Nullable<int> RealDurationDay
		{
			get
			{
				return this._RealDurationDay;
			}
			set
			{
				if ((this._RealDurationDay != value))
				{
					this.OnRealDurationDayChanging(value);
					this.SendPropertyChanging();
					this._RealDurationDay = value;
					this.SendPropertyChanged("RealDurationDay");
					this.OnRealDurationDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealDurationHour", DbType="Int")]
		public System.Nullable<int> RealDurationHour
		{
			get
			{
				return this._RealDurationHour;
			}
			set
			{
				if ((this._RealDurationHour != value))
				{
					this.OnRealDurationHourChanging(value);
					this.SendPropertyChanging();
					this._RealDurationHour = value;
					this.SendPropertyChanged("RealDurationHour");
					this.OnRealDurationHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonSender")]
		public string PersonSender
		{
			get
			{
				return this._PersonSender;
			}
			set
			{
				if ((this._PersonSender != value))
				{
					this.OnPersonSenderChanging(value);
					this.SendPropertyChanging();
					this._PersonSender = value;
					this.SendPropertyChanged("PersonSender");
					this.OnPersonSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dossier_Lending", Storage="_Dossier", ThisKey="PersonnelNumber", OtherKey="PersonnelNumber", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dossier Dossier
		{
			get
			{
				return this._Dossier.Entity;
			}
			set
			{
				Dossier previousValue = this._Dossier.Entity;
				if (((previousValue != value) 
							|| (this._Dossier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dossier.Entity = null;
						previousValue.Lendings.Remove(this);
					}
					this._Dossier.Entity = value;
					if ((value != null))
					{
						value.Lendings.Add(this);
						this._PersonnelNumber = value.PersonnelNumber;
					}
					else
					{
						this._PersonnelNumber = default(string);
					}
					this.SendPropertyChanged("Dossier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Lending", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Lendings.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Lendings.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LendingIntention")]
	public partial class LendingIntention : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public LendingIntention()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MetropolitanArea")]
	public partial class MetropolitanArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public MetropolitanArea()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetropolitanArea_Address", Storage="_Addresses", ThisKey="ID", OtherKey="MetropolitanAreaID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.MetropolitanArea = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.MetropolitanArea = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Lending> _Lendings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Person()
		{
			this._Lendings = new EntitySet<Lending>(new Action<Lending>(this.attach_Lendings), new Action<Lending>(this.detach_Lendings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Lending", Storage="_Lendings", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<Lending> Lendings
		{
			get
			{
				return this._Lendings;
			}
			set
			{
				this._Lendings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lendings(Lending entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Lendings(Lending entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Province")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Province()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Address", Storage="_Addresses", ThisKey="ID", OtherKey="ProvinceID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private EntitySet<DisplayField> _DisplayFields;
		
		private EntitySet<ReportDetail> _ReportDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Report()
		{
			this._DisplayFields = new EntitySet<DisplayField>(new Action<DisplayField>(this.attach_DisplayFields), new Action<DisplayField>(this.detach_DisplayFields));
			this._ReportDetails = new EntitySet<ReportDetail>(new Action<ReportDetail>(this.attach_ReportDetails), new Action<ReportDetail>(this.detach_ReportDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_DisplayField", Storage="_DisplayFields", ThisKey="ID", OtherKey="ReportID")]
		public EntitySet<DisplayField> DisplayFields
		{
			get
			{
				return this._DisplayFields;
			}
			set
			{
				this._DisplayFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportDetail", Storage="_ReportDetails", ThisKey="ID", OtherKey="ReportID")]
		public EntitySet<ReportDetail> ReportDetails
		{
			get
			{
				return this._ReportDetails;
			}
			set
			{
				this._ReportDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DisplayFields(DisplayField entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_DisplayFields(DisplayField entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_ReportDetails(ReportDetail entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportDetails(ReportDetail entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportDetail")]
	public partial class ReportDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ReportID;
		
		private int _ArchiveFieldID;
		
		private int _RelationCode;
		
		private int _MethodCode;
		
		private string _Value;
		
		private System.Nullable<int> _ParentID;
		
		private EntitySet<ReportDetail> _ReportDetails;
		
		private EntityRef<ArchiveField> _ArchiveField;
		
		private EntityRef<Report> _Report;
		
		private EntityRef<ReportDetail> _ReportDetail1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReportIDChanging(System.Nullable<int> value);
    partial void OnReportIDChanged();
    partial void OnArchiveFieldIDChanging(int value);
    partial void OnArchiveFieldIDChanged();
    partial void OnRelationCodeChanging(int value);
    partial void OnRelationCodeChanged();
    partial void OnMethodCodeChanging(int value);
    partial void OnMethodCodeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    #endregion
		
		public ReportDetail()
		{
			this._ReportDetails = new EntitySet<ReportDetail>(new Action<ReportDetail>(this.attach_ReportDetails), new Action<ReportDetail>(this.detach_ReportDetails));
			this._ArchiveField = default(EntityRef<ArchiveField>);
			this._Report = default(EntityRef<Report>);
			this._ReportDetail1 = default(EntityRef<ReportDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int")]
		public System.Nullable<int> ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveFieldID", DbType="Int NOT NULL")]
		public int ArchiveFieldID
		{
			get
			{
				return this._ArchiveFieldID;
			}
			set
			{
				if ((this._ArchiveFieldID != value))
				{
					if (this._ArchiveField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveFieldID = value;
					this.SendPropertyChanged("ArchiveFieldID");
					this.OnArchiveFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationCode", DbType="Int NOT NULL")]
		public int RelationCode
		{
			get
			{
				return this._RelationCode;
			}
			set
			{
				if ((this._RelationCode != value))
				{
					this.OnRelationCodeChanging(value);
					this.SendPropertyChanging();
					this._RelationCode = value;
					this.SendPropertyChanged("RelationCode");
					this.OnRelationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodCode", DbType="Int NOT NULL")]
		public int MethodCode
		{
			get
			{
				return this._MethodCode;
			}
			set
			{
				if ((this._MethodCode != value))
				{
					this.OnMethodCodeChanging(value);
					this.SendPropertyChanging();
					this._MethodCode = value;
					this.SendPropertyChanged("MethodCode");
					this.OnMethodCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._ReportDetail1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportDetail_ReportDetail", Storage="_ReportDetails", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<ReportDetail> ReportDetails
		{
			get
			{
				return this._ReportDetails;
			}
			set
			{
				this._ReportDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchiveField_ReportDetail", Storage="_ArchiveField", ThisKey="ArchiveFieldID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ArchiveField ArchiveField
		{
			get
			{
				return this._ArchiveField.Entity;
			}
			set
			{
				ArchiveField previousValue = this._ArchiveField.Entity;
				if (((previousValue != value) 
							|| (this._ArchiveField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchiveField.Entity = null;
						previousValue.ReportDetails.Remove(this);
					}
					this._ArchiveField.Entity = value;
					if ((value != null))
					{
						value.ReportDetails.Add(this);
						this._ArchiveFieldID = value.ID;
					}
					else
					{
						this._ArchiveFieldID = default(int);
					}
					this.SendPropertyChanged("ArchiveField");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportDetail", Storage="_Report", ThisKey="ReportID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportDetails.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportDetails.Add(this);
						this._ReportID = value.ID;
					}
					else
					{
						this._ReportID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportDetail_ReportDetail", Storage="_ReportDetail1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public ReportDetail ReportDetail1
		{
			get
			{
				return this._ReportDetail1.Entity;
			}
			set
			{
				ReportDetail previousValue = this._ReportDetail1.Entity;
				if (((previousValue != value) 
							|| (this._ReportDetail1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportDetail1.Entity = null;
						previousValue.ReportDetails.Remove(this);
					}
					this._ReportDetail1.Entity = value;
					if ((value != null))
					{
						value.ReportDetails.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReportDetail1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportDetails(ReportDetail entity)
		{
			this.SendPropertyChanging();
			entity.ReportDetail1 = this;
		}
		
		private void detach_ReportDetails(ReportDetail entity)
		{
			this.SendPropertyChanging();
			entity.ReportDetail1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RightfulPerson")]
	public partial class RightfulPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Fathername;
		
		private string _NationalCode;
		
		private string _IdentityNumber;
		
		private string _Birthdate;
		
		private string _Address;
		
		private string _Tel;
		
		private string _Mobile;
		
		private string _WorkAddress;
		
		private string _BackAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnFathernameChanging(string value);
    partial void OnFathernameChanged();
    partial void OnNationalCodeChanging(string value);
    partial void OnNationalCodeChanged();
    partial void OnIdentityNumberChanging(string value);
    partial void OnIdentityNumberChanged();
    partial void OnBirthdateChanging(string value);
    partial void OnBirthdateChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnWorkAddressChanging(string value);
    partial void OnWorkAddressChanged();
    partial void OnBackAccountChanging(string value);
    partial void OnBackAccountChanged();
    #endregion
		
		public RightfulPerson()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fathername", DbType="NVarChar(50)")]
		public string Fathername
		{
			get
			{
				return this._Fathername;
			}
			set
			{
				if ((this._Fathername != value))
				{
					this.OnFathernameChanging(value);
					this.SendPropertyChanging();
					this._Fathername = value;
					this.SendPropertyChanged("Fathername");
					this.OnFathernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalCode", DbType="NVarChar(50)")]
		public string NationalCode
		{
			get
			{
				return this._NationalCode;
			}
			set
			{
				if ((this._NationalCode != value))
				{
					this.OnNationalCodeChanging(value);
					this.SendPropertyChanging();
					this._NationalCode = value;
					this.SendPropertyChanged("NationalCode");
					this.OnNationalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentityNumber", DbType="NVarChar(50)")]
		public string IdentityNumber
		{
			get
			{
				return this._IdentityNumber;
			}
			set
			{
				if ((this._IdentityNumber != value))
				{
					this.OnIdentityNumberChanging(value);
					this.SendPropertyChanging();
					this._IdentityNumber = value;
					this.SendPropertyChanged("IdentityNumber");
					this.OnIdentityNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="NVarChar(50)")]
		public string Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this.OnBirthdateChanging(value);
					this.SendPropertyChanging();
					this._Birthdate = value;
					this.SendPropertyChanged("Birthdate");
					this.OnBirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(50)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(50)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkAddress", DbType="NVarChar(250)")]
		public string WorkAddress
		{
			get
			{
				return this._WorkAddress;
			}
			set
			{
				if ((this._WorkAddress != value))
				{
					this.OnWorkAddressChanging(value);
					this.SendPropertyChanging();
					this._WorkAddress = value;
					this.SendPropertyChanged("WorkAddress");
					this.OnWorkAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackAccount", DbType="NVarChar(50)")]
		public string BackAccount
		{
			get
			{
				return this._BackAccount;
			}
			set
			{
				if ((this._BackAccount != value))
				{
					this.OnBackAccountChanging(value);
					this.SendPropertyChanging();
					this._BackAccount = value;
					this.SendPropertyChanged("BackAccount");
					this.OnBackAccountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressView")]
	public partial class AddressView
	{
		
		private long _ID;
		
		private string _PersonnelNumber;
		
		private int _AddressTypeID;
		
		private string _Title;
		
		private int _ProvinceID;
		
		private string _ProvinceTitle;
		
		private string _Township;
		
		private string _Street;
		
		private string _Alley;
		
		private string _PostalCode;
		
		private int _MetropolitanAreaID;
		
		private string _AreaTitle;
		
		public AddressView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					this._PersonnelNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressTypeID", DbType="Int NOT NULL")]
		public int AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					this._AddressTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int NOT NULL")]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this._ProvinceID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProvinceTitle
		{
			get
			{
				return this._ProvinceTitle;
			}
			set
			{
				if ((this._ProvinceTitle != value))
				{
					this._ProvinceTitle = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Township", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Township
		{
			get
			{
				return this._Township;
			}
			set
			{
				if ((this._Township != value))
				{
					this._Township = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this._Street = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alley", DbType="NVarChar(50)")]
		public string Alley
		{
			get
			{
				return this._Alley;
			}
			set
			{
				if ((this._Alley != value))
				{
					this._Alley = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(50)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this._PostalCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetropolitanAreaID", DbType="Int NOT NULL")]
		public int MetropolitanAreaID
		{
			get
			{
				return this._MetropolitanAreaID;
			}
			set
			{
				if ((this._MetropolitanAreaID != value))
				{
					this._MetropolitanAreaID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AreaTitle
		{
			get
			{
				return this._AreaTitle;
			}
			set
			{
				if ((this._AreaTitle != value))
				{
					this._AreaTitle = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactView")]
	public partial class ContactView
	{
		
		private long _ID;
		
		private string _PersonnelNumber;
		
		private int _CallTypeID;
		
		private string _Title;
		
		private string _Number;
		
		private string _Comment;
		
		public ContactView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					this._PersonnelNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallTypeID", DbType="Int NOT NULL")]
		public int CallTypeID
		{
			get
			{
				return this._CallTypeID;
			}
			set
			{
				if ((this._CallTypeID != value))
				{
					this._CallTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this._Number = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(100)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisplayFieldView")]
	public partial class DisplayFieldView
	{
		
		private int _ID;
		
		private int _Code;
		
		private int _ArchiveFieldID;
		
		private string _ArchiveFieldLabel;
		
		private string _ArchiveFieldName;
		
		private int _ArchiveTabID;
		
		private string _ArchiveTabTitle;
		
		private string _ArchiveTabName;
		
		public DisplayFieldView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL")]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveFieldID", DbType="Int NOT NULL")]
		public int ArchiveFieldID
		{
			get
			{
				return this._ArchiveFieldID;
			}
			set
			{
				if ((this._ArchiveFieldID != value))
				{
					this._ArchiveFieldID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveFieldLabel", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ArchiveFieldLabel
		{
			get
			{
				return this._ArchiveFieldLabel;
			}
			set
			{
				if ((this._ArchiveFieldLabel != value))
				{
					this._ArchiveFieldLabel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveFieldName", DbType="NVarChar(MAX)")]
		public string ArchiveFieldName
		{
			get
			{
				return this._ArchiveFieldName;
			}
			set
			{
				if ((this._ArchiveFieldName != value))
				{
					this._ArchiveFieldName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveTabID", DbType="Int NOT NULL")]
		public int ArchiveTabID
		{
			get
			{
				return this._ArchiveTabID;
			}
			set
			{
				if ((this._ArchiveTabID != value))
				{
					this._ArchiveTabID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveTabTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ArchiveTabTitle
		{
			get
			{
				return this._ArchiveTabTitle;
			}
			set
			{
				if ((this._ArchiveTabTitle != value))
				{
					this._ArchiveTabTitle = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveTabName", DbType="NVarChar(50)")]
		public string ArchiveTabName
		{
			get
			{
				return this._ArchiveTabName;
			}
			set
			{
				if ((this._ArchiveTabName != value))
				{
					this._ArchiveTabName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LegalPersonView")]
	public partial class LegalPersonView
	{
		
		private int _Id;
		
		private string _Name;
		
		private string _CompanyNumber;
		
		private string _EconomicNumber;
		
		private string _Address;
		
		private string _Tel;
		
		private string _Manager;
		
		private string _ManagerTel;
		
		public LegalPersonView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyNumber", DbType="NVarChar(50)")]
		public string CompanyNumber
		{
			get
			{
				return this._CompanyNumber;
			}
			set
			{
				if ((this._CompanyNumber != value))
				{
					this._CompanyNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EconomicNumber", DbType="NVarChar(50)")]
		public string EconomicNumber
		{
			get
			{
				return this._EconomicNumber;
			}
			set
			{
				if ((this._EconomicNumber != value))
				{
					this._EconomicNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(50)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this._Tel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager", DbType="NVarChar(50)")]
		public string Manager
		{
			get
			{
				return this._Manager;
			}
			set
			{
				if ((this._Manager != value))
				{
					this._Manager = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerTel", DbType="NVarChar(50)")]
		public string ManagerTel
		{
			get
			{
				return this._ManagerTel;
			}
			set
			{
				if ((this._ManagerTel != value))
				{
					this._ManagerTel = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LendingView")]
	public partial class LendingView
	{
		
		private int _ID;
		
		private string _PersonnelNumber;
		
		private int _PersonID;
		
		private string _PersonName;
		
		private string _Intention;
		
		private string _Date;
		
		private string _Time;
		
		private int _DurationDay;
		
		private int _DurationHour;
		
		private string _ReturnDate;
		
		private string _ReturnTime;
		
		private System.Nullable<int> _RealDurationDay;
		
		private System.Nullable<int> _RealDurationHour;
		
		public LendingView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonnelNumber
		{
			get
			{
				return this._PersonnelNumber;
			}
			set
			{
				if ((this._PersonnelNumber != value))
				{
					this._PersonnelNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this._PersonID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PersonName
		{
			get
			{
				return this._PersonName;
			}
			set
			{
				if ((this._PersonName != value))
				{
					this._PersonName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Intention", DbType="NVarChar(MAX)")]
		public string Intention
		{
			get
			{
				return this._Intention;
			}
			set
			{
				if ((this._Intention != value))
				{
					this._Intention = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this._Time = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationDay", DbType="Int NOT NULL")]
		public int DurationDay
		{
			get
			{
				return this._DurationDay;
			}
			set
			{
				if ((this._DurationDay != value))
				{
					this._DurationDay = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationHour", DbType="Int NOT NULL")]
		public int DurationHour
		{
			get
			{
				return this._DurationHour;
			}
			set
			{
				if ((this._DurationHour != value))
				{
					this._DurationHour = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDate", DbType="Char(10)")]
		public string ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this._ReturnDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnTime", DbType="Char(5)")]
		public string ReturnTime
		{
			get
			{
				return this._ReturnTime;
			}
			set
			{
				if ((this._ReturnTime != value))
				{
					this._ReturnTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealDurationDay", DbType="Int")]
		public System.Nullable<int> RealDurationDay
		{
			get
			{
				return this._RealDurationDay;
			}
			set
			{
				if ((this._RealDurationDay != value))
				{
					this._RealDurationDay = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealDurationHour", DbType="Int")]
		public System.Nullable<int> RealDurationHour
		{
			get
			{
				return this._RealDurationHour;
			}
			set
			{
				if ((this._RealDurationHour != value))
				{
					this._RealDurationHour = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
